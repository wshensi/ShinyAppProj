[
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "1 üìò Storyboard\nThis report is part of Take-home Exercise 3 for ISSS608: Visual Analytics and Applications.\nFor group consistency and reference, please refer to Wang Anqi‚Äôs published version.\nAll analyses, code, and visualizations are replicated and extended based on our joint discussion."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "For the purpose of this exercise, four R packages will be used. They are tidyverse, jsonlite, tidygraph and ggraph.\nIn the code chunk below,¬†p_load()¬†of¬†pacman¬†package is used to load the R packages into R environemnt.\n\npacman::p_load(tidyverse, jsonlite,\n               tidygraph, ggraph)\n\n\n\n\nFor the purpose of this exercise, MC1_graph.json file will be used. Before getting started, you should have the data set in the data sub-folder.\nIn the code chunk below, fromJSON() of jsonlite package is used to import MC1_graph.json file into R and save the output object\n\nkg &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\n\nBefore preparing the data, it is always a good practice to examine the structure of kg object.\nIn the code chunk below str() is used to reveal the structure of kg object.\n\nstr(kg, max.level = 1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\n\n\n\n\nNext,¬†as_tibble()¬†of¬†tibble¬†package package is used to extract the nodes and links tibble data frames from¬†kg¬†object into two separate tibble data frames called¬†nodes_tbl¬†and¬†edges_tbl¬†respectively.\n\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links) \n\n\n\nIt is time for us to apply appropriate EDA methods to examine the data.\nIn this code chunk below, ggplot2 functions are used the reveal the frequency distribution of Edge Type field of edges_tbl.\n\nggplot(data = edges_tbl,\n       aes(y = `Edge Type`)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nOn the other hands, code chunk below uses ggplot2 functions to reveal the frequency distribution of¬†Node Type¬†field of¬†nodes_tbl.\n\nggplot(data = nodes_tbl,\n       aes(y = `Node Type`)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore we can go ahead to build the tidygraph object, it is important for us to ensures each id from the node list is mapped to the correct row number. This requirement can be achive by using the code chunk below.\n\nid_map &lt;- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n\n\n\n\nNext, we will map the source and the target IDs to row indices by using the code chunk below.\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\n\nLastly, the code chunk below will be used to exclude the unmatch edges.\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n\nLastly, tbl_graph() is used to create tidygraph‚Äôs graph object by using the code chunk below.\n\ngraph &lt;- tbl_graph(nodes = nodes_tbl, \n                   edges = edges_tbl, \n                   directed = kg$directed)\n\nYou might want to confirm the output object is indeed in tidygraph format by using the code chunk below.\n\nclass(graph)\n\n[1] \"tbl_graph\" \"igraph\"   \n\n\n\n\n\n\nIn this section, we will use ggraph‚Äôs functions to visualise and analyse the graph object.\nSeveral of the ggraph layouts involve randomisation. In order to ensure reproducibility, it is necessary to set the seed value before plotting by using the code chunk below.\n\nset.seed(1234)\n\n\n\nIn the code chunk below, ggraph functions are used to visualise the whole graph.\n\n\n# ggraph(graph, layout = \"fr\") +\n#   geom_edge_link(alpha = 0.3, \n#                  colour = \"gray\") +\n#   geom_node_point(aes(color = `Node Type`), \n#                   size = 4) +\n#   geom_node_text(aes(label = name), \n#                  repel = TRUE, \n#                  size = 2.5) +\n#   theme_void()\n\nNotice that the whole graph is very messy and we can hardy discover any useful patterns. This is always the case in graph visualisation and analysis. In order to gain meaningful visual discovery, it is always useful for us to looking into the details, for example by plotting sub-graphs.\n\n\n\nIn this section, we are interested to create a sub-graph base on MemberOf value in Edge Type column of the edges data frame.\n\n\n\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")\n\n\n\n\n\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n\n\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id)  # optional cleanup\n\n\n\n\n\nggraph(graph_memberof, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5, \n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`), \n                  size = 1) +\n  geom_node_text(aes(label = name), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()\n\n\n\n\n\n\n\n\nNotice that the sub-graph above is very clear and the relationship between musical group and person can be visualise easily.\n\n\n\n\n\n\n\n\nTo understand Sailor Shift‚Äôs musical inspirations and early career influences, we analyzed all incoming edges directed to her node labeled as \"InStyleOf\", \"CoverOf\", and \"DirectlySamples\".\nA stacked bar chart was created to visualize the top 10 artists who most influenced Sailor Shift, categorized by type of influence. This analysis revealed that her style was shaped by a variety of artists, with influences ranging from stylistic imitation to direct sampling and covers.\nThis suggests that Sailor‚Äôs artistic development was not limited to a single mentor or genre, but instead built upon a diverse foundation of musical inspirations.\n\nsailor_id &lt;- nodes_tbl %&gt;% filter(name == \"Sailor Shift\") %&gt;% pull(id)\n\nin_edges &lt;- edges_tbl %&gt;%\n  filter(target == sailor_id,\n         `Edge Type` %in% c(\"InStyleOf\", \"CoverOf\", \"DirectlySamples\")) %&gt;%\n  left_join(nodes_tbl %&gt;% select(id, name), by = c(\"source\" = \"id\"))\n\nin_edges %&gt;%\n  filter(name != \"0\") %&gt;%\n  count(name, `Edge Type`, sort = TRUE) %&gt;%\n  group_by(name) %&gt;%\n  mutate(total = sum(n)) %&gt;%\n  ungroup() %&gt;%\n  slice_max(order_by = total, n = 10) %&gt;%\n  ggplot(aes(x = reorder(name, total), y = n, fill = `Edge Type`)) +\n  geom_col(width = 0.6) +\n  coord_flip() +\n  labs(title = \"Top 10 Influencers of Sailor Shift\",\n       x = \"Artist\", y = \"Frequency\",\n       fill = \"Type of Influence\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nTo assess Sailor Shift‚Äôs direct impact on the music community, we examined all outgoing edges from her node, focusing again on \"InStyleOf\", \"CoverOf\", and \"DirectlySamples\".\nThe top 10 recipients of her influence were visualized in a stacked bar chart, highlighting the nature and frequency of the influence relationships. This illustrates the artists who either borrowed stylistically from Sailor or engaged with her work directly through covers or sampling.\nThe visualization shows that Sailor played an active and multifaceted role in shaping the musical directions of several notable artists. Her influence extended into both Oceanus Folk and adjacent genres, establishing her as a key figure in the evolving music landscape.\n\nsailor_id &lt;- nodes_tbl %&gt;% filter(name == \"Sailor Shift\") %&gt;% pull(id)\n\nout_edges &lt;- edges_tbl %&gt;%\n  filter(source == sailor_id,\n         `Edge Type` %in% c(\"InStyleOf\", \"CoverOf\", \"DirectlySamples\")) %&gt;%\n  left_join(nodes_tbl %&gt;% select(id, name), by = c(\"target\" = \"id\"))\n\nout_edges %&gt;%\n  filter(name != \"0\") %&gt;%\n  count(name, `Edge Type`, sort = TRUE) %&gt;%\n  group_by(name) %&gt;%\n  mutate(total = sum(n)) %&gt;%\n  ungroup() %&gt;%\n  slice_max(order_by = total, n = 10) %&gt;%\n  ggplot(aes(x = reorder(name, total), y = n, fill = `Edge Type`)) +\n  geom_col(width = 0.6) +\n  coord_flip() +\n  labs(\n    title = \"Top 10 Artists Influenced by Sailor Shift\",\n    x = \"Artist\", y = \"Influence Frequency\",\n    fill = \"Type of Influence\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo understand Sailor Shift‚Äôs extended influence, we examined not only the artists directly influenced by her, but also those who were influenced indirectly via her collaborators. Specifically, we traced all edges where Sailor was the source (direct influence), and then followed the influence paths of her direct collaborators (second-degree influence).\n\n\n\n\nSailor Shift directly influenced 3 artists through collaborations or stylistic influence.\n\n\n\nThese collaborators subsequently influenced 2 additional artists.\n\n\n\nIn total, her influence extends across 6 unique individuals through two layers.\n\n\n\nAmong the second-degree influenced artists, none were explicitly labeled under the ‚ÄúOceanus Folk‚Äù genre (suggesting that her influence transcended genres).\n\n\n\n\nAlthough none of the second-degree influenced artists were tagged as ‚ÄúOceanus Folk‚Äù, Sailor‚Äôs influence propagated through her collaborators to shape a broader group of artists. This highlights her role as a catalyst within the network, enabling stylistic diffusion even when the final recipients fall outside her original genre.\nThis pattern suggests that Sailor served as a bridge between Oceanus Folk and other genres, allowing her influence to transcend traditional boundaries and seed innovation across the music ecosystem."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#getting-started",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "For the purpose of this exercise, four R packages will be used. They are tidyverse, jsonlite, tidygraph and ggraph.\nIn the code chunk below,¬†p_load()¬†of¬†pacman¬†package is used to load the R packages into R environemnt.\n\npacman::p_load(tidyverse, jsonlite,\n               tidygraph, ggraph)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-kownledge-graph-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-kownledge-graph-data",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "For the purpose of this exercise, MC1_graph.json file will be used. Before getting started, you should have the data set in the data sub-folder.\nIn the code chunk below, fromJSON() of jsonlite package is used to import MC1_graph.json file into R and save the output object\n\nkg &lt;- fromJSON(\"data/MC1_graph.json\")\n\n\n\nBefore preparing the data, it is always a good practice to examine the structure of kg object.\nIn the code chunk below str() is used to reveal the structure of kg object.\n\nstr(kg, max.level = 1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#extracting-the-edges-and-nodes-tables",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#extracting-the-edges-and-nodes-tables",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "Next,¬†as_tibble()¬†of¬†tibble¬†package package is used to extract the nodes and links tibble data frames from¬†kg¬†object into two separate tibble data frames called¬†nodes_tbl¬†and¬†edges_tbl¬†respectively.\n\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links) \n\n\n\nIt is time for us to apply appropriate EDA methods to examine the data.\nIn this code chunk below, ggplot2 functions are used the reveal the frequency distribution of Edge Type field of edges_tbl.\n\nggplot(data = edges_tbl,\n       aes(y = `Edge Type`)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nOn the other hands, code chunk below uses ggplot2 functions to reveal the frequency distribution of¬†Node Type¬†field of¬†nodes_tbl.\n\nggplot(data = nodes_tbl,\n       aes(y = `Node Type`)) +\n  geom_bar()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#creating-knowledge-graph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#creating-knowledge-graph",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "Before we can go ahead to build the tidygraph object, it is important for us to ensures each id from the node list is mapped to the correct row number. This requirement can be achive by using the code chunk below.\n\nid_map &lt;- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n\n\n\n\nNext, we will map the source and the target IDs to row indices by using the code chunk below.\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\n\nLastly, the code chunk below will be used to exclude the unmatch edges.\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\n\nLastly, tbl_graph() is used to create tidygraph‚Äôs graph object by using the code chunk below.\n\ngraph &lt;- tbl_graph(nodes = nodes_tbl, \n                   edges = edges_tbl, \n                   directed = kg$directed)\n\nYou might want to confirm the output object is indeed in tidygraph format by using the code chunk below.\n\nclass(graph)\n\n[1] \"tbl_graph\" \"igraph\""
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualising-the-knowledge-graph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualising-the-knowledge-graph",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "In this section, we will use ggraph‚Äôs functions to visualise and analyse the graph object.\nSeveral of the ggraph layouts involve randomisation. In order to ensure reproducibility, it is necessary to set the seed value before plotting by using the code chunk below.\n\nset.seed(1234)\n\n\n\nIn the code chunk below, ggraph functions are used to visualise the whole graph.\n\n\n# ggraph(graph, layout = \"fr\") +\n#   geom_edge_link(alpha = 0.3, \n#                  colour = \"gray\") +\n#   geom_node_point(aes(color = `Node Type`), \n#                   size = 4) +\n#   geom_node_text(aes(label = name), \n#                  repel = TRUE, \n#                  size = 2.5) +\n#   theme_void()\n\nNotice that the whole graph is very messy and we can hardy discover any useful patterns. This is always the case in graph visualisation and analysis. In order to gain meaningful visual discovery, it is always useful for us to looking into the details, for example by plotting sub-graphs.\n\n\n\nIn this section, we are interested to create a sub-graph base on MemberOf value in Edge Type column of the edges data frame.\n\n\n\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")\n\n\n\n\n\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\n\n\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id)  # optional cleanup\n\n\n\n\n\nggraph(graph_memberof, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5, \n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`), \n                  size = 1) +\n  geom_node_text(aes(label = name), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()\n\n\n\n\n\n\n\n\nNotice that the sub-graph above is very clear and the relationship between musical group and person can be visualise easily."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#a.-who-influenced-sailor-shift",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#a.-who-influenced-sailor-shift",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "To understand Sailor Shift‚Äôs musical inspirations and early career influences, we analyzed all incoming edges directed to her node labeled as \"InStyleOf\", \"CoverOf\", and \"DirectlySamples\".\nA stacked bar chart was created to visualize the top 10 artists who most influenced Sailor Shift, categorized by type of influence. This analysis revealed that her style was shaped by a variety of artists, with influences ranging from stylistic imitation to direct sampling and covers.\nThis suggests that Sailor‚Äôs artistic development was not limited to a single mentor or genre, but instead built upon a diverse foundation of musical inspirations.\n\nsailor_id &lt;- nodes_tbl %&gt;% filter(name == \"Sailor Shift\") %&gt;% pull(id)\n\nin_edges &lt;- edges_tbl %&gt;%\n  filter(target == sailor_id,\n         `Edge Type` %in% c(\"InStyleOf\", \"CoverOf\", \"DirectlySamples\")) %&gt;%\n  left_join(nodes_tbl %&gt;% select(id, name), by = c(\"source\" = \"id\"))\n\nin_edges %&gt;%\n  filter(name != \"0\") %&gt;%\n  count(name, `Edge Type`, sort = TRUE) %&gt;%\n  group_by(name) %&gt;%\n  mutate(total = sum(n)) %&gt;%\n  ungroup() %&gt;%\n  slice_max(order_by = total, n = 10) %&gt;%\n  ggplot(aes(x = reorder(name, total), y = n, fill = `Edge Type`)) +\n  geom_col(width = 0.6) +\n  coord_flip() +\n  labs(title = \"Top 10 Influencers of Sailor Shift\",\n       x = \"Artist\", y = \"Frequency\",\n       fill = \"Type of Influence\") +\n  theme_minimal()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#b.-who-did-sailor-shift-influence",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#b.-who-did-sailor-shift-influence",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "To assess Sailor Shift‚Äôs direct impact on the music community, we examined all outgoing edges from her node, focusing again on \"InStyleOf\", \"CoverOf\", and \"DirectlySamples\".\nThe top 10 recipients of her influence were visualized in a stacked bar chart, highlighting the nature and frequency of the influence relationships. This illustrates the artists who either borrowed stylistically from Sailor or engaged with her work directly through covers or sampling.\nThe visualization shows that Sailor played an active and multifaceted role in shaping the musical directions of several notable artists. Her influence extended into both Oceanus Folk and adjacent genres, establishing her as a key figure in the evolving music landscape.\n\nsailor_id &lt;- nodes_tbl %&gt;% filter(name == \"Sailor Shift\") %&gt;% pull(id)\n\nout_edges &lt;- edges_tbl %&gt;%\n  filter(source == sailor_id,\n         `Edge Type` %in% c(\"InStyleOf\", \"CoverOf\", \"DirectlySamples\")) %&gt;%\n  left_join(nodes_tbl %&gt;% select(id, name), by = c(\"target\" = \"id\"))\n\nout_edges %&gt;%\n  filter(name != \"0\") %&gt;%\n  count(name, `Edge Type`, sort = TRUE) %&gt;%\n  group_by(name) %&gt;%\n  mutate(total = sum(n)) %&gt;%\n  ungroup() %&gt;%\n  slice_max(order_by = total, n = 10) %&gt;%\n  ggplot(aes(x = reorder(name, total), y = n, fill = `Edge Type`)) +\n  geom_col(width = 0.6) +\n  coord_flip() +\n  labs(\n    title = \"Top 10 Artists Influenced by Sailor Shift\",\n    x = \"Artist\", y = \"Influence Frequency\",\n    fill = \"Type of Influence\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#c.-how-did-sailor-shift-influence-collaborators-of-the-broader-oceanus-folk-community",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#c.-how-did-sailor-shift-influence-collaborators-of-the-broader-oceanus-folk-community",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "To understand Sailor Shift‚Äôs extended influence, we examined not only the artists directly influenced by her, but also those who were influenced indirectly via her collaborators. Specifically, we traced all edges where Sailor was the source (direct influence), and then followed the influence paths of her direct collaborators (second-degree influence).\n\n\n\n\nSailor Shift directly influenced 3 artists through collaborations or stylistic influence.\n\n\n\nThese collaborators subsequently influenced 2 additional artists.\n\n\n\nIn total, her influence extends across 6 unique individuals through two layers.\n\n\n\nAmong the second-degree influenced artists, none were explicitly labeled under the ‚ÄúOceanus Folk‚Äù genre (suggesting that her influence transcended genres).\n\n\n\n\nAlthough none of the second-degree influenced artists were tagged as ‚ÄúOceanus Folk‚Äù, Sailor‚Äôs influence propagated through her collaborators to shape a broader group of artists. This highlights her role as a catalyst within the network, enabling stylistic diffusion even when the final recipients fall outside her original genre.\nThis pattern suggests that Sailor served as a bridge between Oceanus Folk and other genres, allowing her influence to transcend traditional boundaries and seed innovation across the music ecosystem."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.2.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.2.html",
    "title": "Take-home Exercise 1 (Part 2)",
    "section": "",
    "text": "This page presents a visualisation critique and redesign based on a submission by my course-mate, XU XINYI, for the third exploratory data analysis task (EDA 3). The original plot titled ‚ÄúBox Plot with Data Superimposed ‚Äì Population by Age Group (30‚Äì49), Across Planning Areas (2024)‚Äù used faceted box plots to visualize population distribution across six major planning areas in Singapore."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.2.html#load-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.2.html#load-packages",
    "title": "Take-home Exercise 1 (Part 2)",
    "section": "2.1 Load packages",
    "text": "2.1 Load packages\nThe following R packages will be loaded using the¬†pacman::p_load()¬†function.\n\npacman::p_load(tidyverse, haven,\n               ggrepel, ggthemes,\n               ggridges, ggdist,\n               patchwork, scales, ggExtra)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.2.html#import-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.2.html#import-data",
    "title": "Take-home Exercise 1 (Part 2)",
    "section": "2.2 Import data",
    "text": "2.2 Import data\nTo accomplish the task, Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 dataset shares by¬†Department of Statistics, Singapore (DOS)¬†should be used.\nThe code chunk below imports respopagesex2024.csv into R environment by using read_csv()function of readr package. readr is one of the tidyverse package.\nWe import this dataset as sgresident\n\nsgresident &lt;- read_csv(\"data/respopagesex2024.csv \")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.2.html#data-preprocessing",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.2.html#data-preprocessing",
    "title": "Take-home Exercise 1 (Part 2)",
    "section": "2.3 Data preprocessing",
    "text": "2.3 Data preprocessing\nWe first take a look at the data and check if there are any duplicates.\n\nglimpse(sgresident)\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K‚Ä¶\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T‚Ä¶\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", ‚Ä¶\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male‚Ä¶\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3‚Ä¶\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,‚Ä¶\n\n\n\nsgresident[duplicated(sgresident),]\n\n# A tibble: 0 √ó 6\n# ‚Ñπ 6 variables: PA &lt;chr&gt;, SZ &lt;chr&gt;, Age &lt;chr&gt;, Sex &lt;chr&gt;, Pop &lt;dbl&gt;,\n#   Time &lt;dbl&gt;"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.2.html#change-data-type-of-selected-variables",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.2.html#change-data-type-of-selected-variables",
    "title": "Take-home Exercise 1 (Part 2)",
    "section": "2.4 Change data type of selected variables",
    "text": "2.4 Change data type of selected variables\nVariables with inappropriate data type are Age, Sex, Time.¬†\n\nsgresident &lt;- sgresident %&gt;% \n  mutate(Age = as.numeric(Age))\nsgresident &lt;- sgresident %&gt;%\n  mutate(Sex = factor(Sex, levels = c(\"Males\", \"Females\")))\nsgresident &lt;- sgresident %&gt;%\n  mutate(Time = as.integer(Time))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.2.html#check-for-missing-values",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.2.html#check-for-missing-values",
    "title": "Take-home Exercise 1 (Part 2)",
    "section": "2.5 Check for missing values",
    "text": "2.5 Check for missing values\nThe age column has 664 missing values, which have been stored as strings before data type conversion. In this case, we do not need to remove those data.\n\ncolSums(is.na(sgresident ))\n\n  PA   SZ  Age  Sex  Pop Time \n   0    0  664    0    0    0"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.2.html#preview-pre-processed-dataframe",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.2.html#preview-pre-processed-dataframe",
    "title": "Take-home Exercise 1 (Part 2)",
    "section": "2.6 Preview pre-processed dataframe",
    "text": "2.6 Preview pre-processed dataframe\nWe use the function¬†head()¬†to preview the first few rows of the pre-processed dataframe:\n\nhead(sgresident, 200)\n\n# A tibble: 200 √ó 6\n   PA         SZ                       Age Sex       Pop  Time\n   &lt;chr&gt;      &lt;chr&gt;                  &lt;dbl&gt; &lt;fct&gt;   &lt;dbl&gt; &lt;int&gt;\n 1 Ang Mo Kio Ang Mo Kio Town Centre     0 Males      10  2024\n 2 Ang Mo Kio Ang Mo Kio Town Centre     0 Females    10  2024\n 3 Ang Mo Kio Ang Mo Kio Town Centre     1 Males      10  2024\n 4 Ang Mo Kio Ang Mo Kio Town Centre     1 Females    10  2024\n 5 Ang Mo Kio Ang Mo Kio Town Centre     2 Males      10  2024\n 6 Ang Mo Kio Ang Mo Kio Town Centre     2 Females    10  2024\n 7 Ang Mo Kio Ang Mo Kio Town Centre     3 Males      10  2024\n 8 Ang Mo Kio Ang Mo Kio Town Centre     3 Females    10  2024\n 9 Ang Mo Kio Ang Mo Kio Town Centre     4 Males      30  2024\n10 Ang Mo Kio Ang Mo Kio Town Centre     4 Females    10  2024\n# ‚Ñπ 190 more rows"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.2.html#original-work",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.2.html#original-work",
    "title": "Take-home Exercise 1 (Part 2)",
    "section": "3.1 Original Work",
    "text": "3.1 Original Work\nThe visualisation I selected for critique is the third exploratory data analysis (EDA) plot submitted by my classmate, titled ‚ÄúEDA 3: Box Plot with Data Superimposed ‚Äì Population by Age Group (30‚Äì49), Across Planning Areas (2024).‚Äù\nThis is a faceted boxplot with raw data values superimposed, designed to visualise the population distribution of individuals aged 30 to 49 across six major planning areas in Singapore for the year 2024.\nEach planning area is displayed in a separate facet, allowing for structured comparisons across regions. The visual reveals that Tampines and Bedok have relatively high and consistent population levels across all age bands within the 30‚Äì49 range, whereas Sengkang and Punggol show pronounced peaks between ages 35 and 44, reflecting their family-oriented demographic profiles. The use of a logarithmic y-axis serves to highlight disparities between densely and sparsely populated subzones, improving the perceptibility of variation across different scales.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Step 1: Prepare data\ndf_pa_box &lt;- sgresident %&gt;%\n  mutate(\n    Age = as.numeric(Age),\n    AgeGroup = cut(\n      Age,\n      breaks = seq(0, 100, by = 5),\n      right = FALSE,\n      include.lowest = TRUE,\n      labels = paste(seq(0, 95, by = 5), seq(4, 99, by = 5), sep = \"-\")\n    )\n  ) %&gt;%\n  filter(Age &gt;= 30, Age &lt; 50) %&gt;%\n  drop_na(AgeGroup)\n\n# Optional: focus only on top 6 PAs for readability\ntop6_pa &lt;- df_pa_box %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total_Pop = sum(Pop)) %&gt;%\n  arrange(desc(Total_Pop)) %&gt;%\n  slice_head(n = 6) %&gt;%\n  pull(PA)\n\ndf_pa_box &lt;- df_pa_box %&gt;% filter(PA %in% top6_pa)\n\n# Step 2: Boxplot with jittered data, faceted by PA\nggplot(df_pa_box, aes(x = AgeGroup, y = Pop)) +\n  geom_boxplot(fill = \"steelblue\", alpha = 0.6, outlier.shape = NA) +\n  geom_jitter(width = 0.2, alpha = 0.4, color = \"black\", size = 0.8) +\n  scale_y_log10() +\n  facet_wrap(~ PA, scales = \"free_y\") +\n  labs(\n    title = \"Population Distribution by Age Group (30‚Äì49), Faceted by Planning Area\",\n    x = \"Age Group\", y = \"Population (log scale)\"\n  ) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.2.html#good-visual-design-principles",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.2.html#good-visual-design-principles",
    "title": "Take-home Exercise 1 (Part 2)",
    "section": "4.1 Good Visual Design Principles",
    "text": "4.1 Good Visual Design Principles\n\n4.1.1 Faceted Layout Enables Clear Regional Comparison\nThe original chart adopts a faceted layout based on Planning Areas, which allows readers to easily compare intra-region age distributions as well as inter-region demographic trends. This structure enhances analytical clarity by organizing data into manageable visual units.\n\n\n4.1.2 Superimposed Raw Data Points Enhance Distribution Transparency\nBy overlaying raw population data on each boxplot, the visualisation goes beyond summary statistics and allows viewers to see the spread, density, and presence of outliers in each age group. This contributes to a more data-transparent and trustworthy representation.\n\n\n4.1.3 Logarithmic Scale Effectively Handles Skewed Data\nThe use of a log-transformed y-axis appropriately addresses large disparities in population counts across planning areas. It compresses extreme values and prevents dominant regions from visually overshadowing those with smaller populations, thereby supporting a fairer visual comparison."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.2.html#further-improvement",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.2.html#further-improvement",
    "title": "Take-home Exercise 1 (Part 2)",
    "section": "4.2 Further Improvement",
    "text": "4.2 Further Improvement\n\n4.2.1 Age Range Selection is Narrow, Limiting Holistic Insights\nThe original visualization only focuses on the 30‚Äì49 age group, which captures a working-age population but neglects other important demographic segments such as youths and the elderly. By restricting the age scope, the chart omits critical signals related to ageing populations and young family concentrations. The revised version addresses this by including the full age spectrum, providing a more comprehensive demographic perspective.\n\n\n4.2.2 Visual Complexity Reduces Interpretability\nWith six separate panels, numerous overlaid data points, and a log-scaled axis, the original chart demands high cognitive effort. Viewers may find it difficult to extract key insights at a glance. In contrast, the revised visual adopts a consolidated layout, plotting all planning areas on the same axis, which facilitates faster and more effective interpretation.\n\n\n4.2.3 Lack of Statistical Annotations and Visual Emphasis\nWhile the original boxplots display medians and quartiles, they omit key statistical markers such as weighted mean age or explicit group-level annotations. The revised version improves upon this by adding red diamonds to indicate weighted means and black dots for medians. These additions guide attention to population central tendencies and enhance overall communicative clarity."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "ISSS608-VAA- About",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA Visual Analytics Project",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find our project."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "Singapore is a highly urbanized and densely populated nation, where population distribution varies significantly across regions and demographic groups. Gaining insights into these spatial and age-related patterns is critical for informed urban planning, resource allocation, and policy formulation.\n\n\n\nThis take-home exercise aims to uncover key demographic insights from Singapore‚Äôs 2024 resident population dataset. Specifically, it seeks to:\n\nAnalyze the age structure across planning areas\nExplore gender ratios across different regions\nIdentify regions with higher concentrations of children or elderly residents"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "Singapore is a highly urbanized and densely populated nation, where population distribution varies significantly across regions and demographic groups. Gaining insights into these spatial and age-related patterns is critical for informed urban planning, resource allocation, and policy formulation."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#objectives",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#objectives",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "This take-home exercise aims to uncover key demographic insights from Singapore‚Äôs 2024 resident population dataset. Specifically, it seeks to:\n\nAnalyze the age structure across planning areas\nExplore gender ratios across different regions\nIdentify regions with higher concentrations of children or elderly residents"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#tools-used",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#tools-used",
    "title": "Take-home Exercise 1",
    "section": "2.1 Tools Used",
    "text": "2.1 Tools Used\nThe following R packages were utilized for data pre-processing and visualization:\n\npacman::p_load(plotly, tidyverse, DT, ggiraph, patchwork, ggstatsplot, GGally, corrplot)\n\n\ntidyverse: Provides a collection of packages (including dplyr, ggplot2, readr) for data manipulation, transformation, and visualization. It forms the core of data wrangling and plotting throughout this analysis.\nggiraph: Enables interactive versions of ggplot2 graphics, allowing for tooltips and hover interactions in visualizations such as the population pyramid and bar charts.\nplotly: Used to render interactive ggplot outputs in cases like ggplotly() if included (though in your shared code, the output rendering is primarily done via girafe() from ggiraph).\nDT: Provides a wrapper for the JavaScript DataTables library. It is used to display interactive, searchable, and scrollable HTML tables, useful for previewing datasets after each cleaning step.\npatchwork: A layout manager for combining multiple ggplot2 plots into a cohesive visual grid using a simple and expressive syntax like plot1 + plot2. It helps in creating dashboards or side-by-side comparisons.\nggstatsplot: Simplifies statistical visualization by integrating results such as p-values, effect sizes, and confidence intervals directly into ggplot2 charts. Useful for comparing group differences and testing statistical significance visually.\nGGally: Extends ggplot2 by adding functions like ggpairs() for plotting pairwise relationships between variables. It is particularly useful in exploratory data analysis to visualize correlations and distributions across multiple dimensions.\ncorrplot: Specializes in visualizing correlation matrices through heatmaps, circle plots, and color gradients. Helps in identifying variable relationships and multicollinearity in datasets."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-source",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-source",
    "title": "Take-home Exercise 1",
    "section": "2.2 Data Source",
    "text": "2.2 Data Source\nThe dataset originates from Singapore‚Äôs Department of Statistics (DOS) and contains:\n\nPA: Planning Area\nSZ: Subzone\nAge: Age (ranging from 0 to 100+)\nSex: Gender (Males / Females)\nPop: Number of residents\nTime: Year of observation (2024)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#import-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#import-data",
    "title": "Take-home Exercise 1",
    "section": "3.1 Import Data",
    "text": "3.1 Import Data\n\nrespop &lt;- read_csv(\"data/respopagesex2024.csv\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-cleaning",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-cleaning",
    "title": "Take-home Exercise 1",
    "section": "3.2 Data Cleaning",
    "text": "3.2 Data Cleaning\nTo ensure the dataset is clean and ready for analysis, the following steps were performed:\n\n3.2.1 Step 1: Remove Duplicates\nRemove any duplicated rows to avoid double-counting:\n\nThe Code ChunkData Table\n\n\n\nrespop &lt;- distinct(respop)\nDT::datatable(head(respop), options = list(scrollX = TRUE), caption = \"After Removing Duplicates\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.2.2 Step 2: Handle Missing Values\nEnsure there are no missing or malformed entries in critical columns:\n\nThe Code ChunkData Table\n\n\n\nrespop &lt;- drop_na(respop)\nDT::datatable(head(respop), options = list(scrollX = TRUE), caption = \"After Dropping Missing Values\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.2.3 Step 3: Standardize Age Format\nThe Age column includes a non-numeric category \"90_and_Over\" which cannot be coerced into an integer. We convert this category into a numeric age of 90, representing a minimum estimate for analysis:\n\nThe Code ChunkData Table\n\n\n\nrespop &lt;- respop %&gt;%\n  mutate(Age = ifelse(Age == \"90_and_Over\", \"90\", Age),\n         Age = as.integer(Age))\nDT::datatable(head(respop), options = list(scrollX = TRUE), caption = \"After Converting Age Format\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis allows us to include elderly population data in age-based analyses such as population pyramids and dependency ratios.\n\n\n\n\n3.2.4 Step 4: Convert Column Types\nEnsure categorical and numeric columns are properly formatted:\n\nThe Code ChunkData Table\n\n\n\nrespop &lt;- respop %&gt;%\n  mutate(\n    Sex = as.factor(Sex),\n    PA = as.factor(PA),\n    SZ = as.factor(SZ)\n  )\nDT::datatable(head(respop), options = list(scrollX = TRUE), caption = \"After Converting Column Types\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-pyramid-of-singapore-by-age-group",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-pyramid-of-singapore-by-age-group",
    "title": "Take-home Exercise 1",
    "section": "4.1 Population Pyramid of Singapore by Age Group",
    "text": "4.1 Population Pyramid of Singapore by Age Group\nThis section creates an interactive population pyramid for the entire Singapore resident population in 2024. It groups ages into 5-year intervals and displays male and female populations using diverging bars. Tooltips appear when hovering over each bar.\n\n4.1.1 Step 1: Load Libraries\nWe use tidyverse for data manipulation and ggiraph for interactive plotting.\n\nlibrary(tidyverse)\nlibrary(ggiraph)\n\n\n\n4.1.2 Step 2: Prepare Population Pyramid Data with Age Groups and Tooltips\n\nConvert age to numeric;\nBin ages into groups like \"0‚Äì4\", \"5‚Äì9\", ‚Ä¶;\nSummarize population by Sex and AgeGrp;\nMake male population negative to mirror the pyramid;\nAdd a tooltip_text column for interactive tooltips.\n\n\npyramid_sg &lt;- respop %&gt;%\n  mutate(\n    Age = as.numeric(Age),\n    AgeGrp = cut(\n      Age,\n      breaks = c(0, 4, 9, 14, 19, 24, 29, 34, 39, 44, 49,\n                 54, 59, 64, 69, 74, 79, 84, 89, 94, 99, Inf),\n      labels = c(\"0-4\", \"5-9\", \"10-14\", \"15-19\", \"20-24\",\n                 \"25-29\", \"30-34\", \"35-39\", \"40-44\", \"45-49\",\n                 \"50-54\", \"55-59\", \"60-64\", \"65-69\", \"70-74\",\n                 \"75-79\", \"80-84\", \"85-89\", \"90-94\", \"95-99\", \"100+\"),\n      right = FALSE\n    )\n  ) %&gt;%\n  group_by(Sex, AgeGrp) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(\n    Pop_signed = ifelse(Sex == \"Males\", -Pop, Pop),\n    Label = paste0(round(Pop / 1000), \"k\"),\n    tooltip_text = paste0(\"Age Group: \", AgeGrp,\n                          \"&lt;br&gt;Sex: \", Sex,\n                          \"&lt;br&gt;Population: \", format(Pop, big.mark = \",\"))\n  )\n\n\n\n4.1.3 Step 3: Build Interactive ggplot Object\nWe use geom_bar_interactive() from ggiraph to: Create diverging bars (left = males, right = females), Attach the tooltip text, Color-code by gender.\n\nmax_val &lt;- max(pyramid_sg$Pop)\n\npyramid_male &lt;- pyramid_sg %&gt;% filter(Sex == \"Males\")\npyramid_female &lt;- pyramid_sg %&gt;% filter(Sex == \"Females\")\n\ngg &lt;- ggplot(pyramid_sg, aes(x = AgeGrp, y = Pop_signed, fill = Sex,\n                             tooltip = tooltip_text, data_id = AgeGrp)) +\n  geom_bar_interactive(stat = \"identity\", width = 0.8) +\n  geom_text(data = pyramid_male,\n            aes(label = Label),\n            hjust = 1.1, size = 3, color = \"black\") +\n  geom_text(data = pyramid_female,\n            aes(label = Label),\n            hjust = -0.1, size = 3, color = \"black\") +\n  coord_flip() +\n  scale_y_continuous(limits = c(-1.1 * max_val, 1.1 * max_val),\n                     labels = ~ paste0(abs(.x / 1000), \"k\")) +\n  scale_fill_manual(values = c(\"Males\" = \"#1f77b4\", \"Females\" = \"#ff7f0e\")) +\n  theme_minimal() +\n  labs(title = \"Interactive Population Pyramid of Singapore (2024)\",\n       x = \"Age Group\", y = \"Population\", fill = \"Sex\")\n\n\n\n4.1.4 Step 4: Render as Interactive Widget\nWe finally call girafe() to render the interactive graphic. We also customize the tooltip style using CSS.\n\ngirafe(ggobj = gg,\n       width_svg = 8, height_svg = 6,\n       options = list(\n         opts_tooltip(css = \"background-color:white; color:black; border:1px solid gray; padding:5px;\"),\n         opts_hover(css = \"fill-opacity:0.8;cursor:pointer;\")\n       ))\n\n\n\n\n\n\n\n\n\n\n\nInterpretation\n\n\n\nThe population pyramid clearly visualizes demographic trends such as a strong middle-aged working population and a gradually tapering older population, indicative of an aging society with slowing birth rates."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#gender-ratio-by-planning-area",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#gender-ratio-by-planning-area",
    "title": "Take-home Exercise 1",
    "section": "4.2 Gender Ratio by Planning Area",
    "text": "4.2 Gender Ratio by Planning Area\nThis section displays the male-to-female population ratio for each Singapore planning area. It uses color to indicate whether an area has more males, more females, or is balanced, and includes interactive tooltips for details.\n\n4.2.1 Step 1: Load Required Libraries\nWe use tidyverse for data wrangling and ggiraph for creating interactive graphics.\n\nlibrary(tidyverse)\nlibrary(ggiraph)\n\n\n\n4.2.2 Step 2: Calculate Gender Ratio and Prepare Tooltip\n\nGroup data by PA and Sex;\nSummarize total male and female population;\nCalculate the gender ratio (Males / Females);\nClassify each area into \"More Males\", \"More Females\", or \"Balanced\";\nFilter out areas with very small populations (Total_Pop &lt;= 100);\nAdd a Tooltip column to be displayed when hovering.\n\n\ngender_ratio &lt;- respop %&gt;%\n  group_by(PA, Sex) %&gt;%\n  summarise(Total = sum(Pop), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = Sex, values_from = Total) %&gt;%\n  mutate(Total_Pop = Males + Females) %&gt;%\n  filter(Total_Pop &gt; 100) %&gt;% \n  mutate(\n    Ratio = round(Males / Females, 2),\n    Status = case_when(\n      Ratio &gt; 1.05 ~ \"More Males\",\n      Ratio &lt; 0.95 ~ \"More Females\",\n      TRUE ~ \"Balanced\"\n    ),\n    Tooltip = paste0(\"Planning Area: \", PA,\n                     \"\\nMales: \", format(Males, big.mark = \",\"),\n                     \"\\nFemales: \", format(Females, big.mark = \",\"),\n                     \"\\nRatio (M/F): \", Ratio),\n    Label = as.character(Ratio)\n  )\n\n\n\n4.2.3 Step 3: Create the ggplot Object with Interactive Bars\nWe create a horizontal bar chart with:\n\nColor-coded bars based on Status;\nTooltip on hover (using geom_col_interactive);\nLabels showing exact ratio values;\nSmaller y-axis text for better readability.\n\n\ngg &lt;- ggplot(gender_ratio,\n             aes(x = reorder(PA, Ratio), y = Ratio,\n                 fill = Status,\n                 tooltip = Tooltip, data_id = PA)) +\n  geom_col_interactive(width = 0.7) +\n  geom_text(aes(label = Label),\n            hjust = -0.1, color = \"black\", size = 3) + \n  scale_fill_manual(values = c(\"More Males\" = \"#1f77b4\",\n                               \"More Females\" = \"#ff7f0e\",\n                               \"Balanced\" = \"#66c2a5\")) +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n    axis.text.y = element_text(size = 7),\n    plot.margin = margin(r = 20) \n  ) +\n  labs(title = \"Interactive Gender Ratio by Planning Area (M/F)\",\n       x = \"Planning Area\", y = \"Male-to-Female Ratio\")\n\n\n\n4.2.4 Step 4: Render Interactive Widget\nWe use girafe() to display the chart with hover tooltips and styling.\n\ngirafe(ggobj = gg,\n       width_svg = 8, height_svg = 6,\n       options = list(\n         opts_tooltip(css = \"background-color:white;color:black;border:1px solid gray;padding:5px;\"),\n         opts_hover(css = \"fill-opacity:0.8;cursor:pointer;\")\n       ))\n\n\n\n\n\n\n\n\n\n\n\nInterpretation\n\n\n\nMost areas show balanced gender distributions, though some regions‚Äîsuch as Sungei Kadut and Changi‚Äîexhibit significant gender disparities, which may be related to industrial land use or specific housing demographics."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#total-population-by-planning-area",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#total-population-by-planning-area",
    "title": "Take-home Exercise 1",
    "section": "4.3 Total Population by Planning Area",
    "text": "4.3 Total Population by Planning Area\nThis section presents the total 2024 population for each planning area in Singapore using an interactive bar chart. Tooltips reveal the exact population figures on hover, and low-population areas are excluded to improve readability.\n\n4.3.1 Step 1: Load Required Libraries\nWe load tidyverse for data manipulation and ggiraph for interactive plotting.\n\nlibrary(tidyverse)\nlibrary(ggiraph)\n\n\n\n4.3.2 Step 2: Aggregate and Filter Population Data\n\nGroup the dataset by PA (planning area);\nSummarize total population (Total_Pop);\nFilter out areas with negligible population (e.g., below 100);\nAdd a Tooltip column with formatted text for display.\n\n\ntotal_pop &lt;- respop %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total_Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  filter(Total_Pop &gt; 100) %&gt;%\n  mutate(\n    Tooltip = paste0(\"Planning Area: \", PA,\n                     \"\\nPopulation: \", format(Total_Pop, big.mark = \",\")),\n    Label = paste0(round(Total_Pop / 1000), \"k\")\n  )\n\n\n\n4.3.3 Step 3: Build Interactive ggplot Object\n\nReorder planning areas by total population;\nAdd tooltips via geom_col_interactive();\nFlip coordinates for clearer labels;\nSet minimalist theme and small font for y-axis.\n\n\nmax_val &lt;- max(total_pop$Total_Pop)\n\ngg &lt;- ggplot(total_pop, aes(x = reorder(PA, Total_Pop), y = Total_Pop,\n                            tooltip = Tooltip, data_id = PA)) +\n  geom_col_interactive(fill = \"#2ca02c\", width = 0.7) +\n  geom_text(aes(label = Label),\n            hjust = -0.1, color = \"black\", size = 3) + \n  coord_flip() +\n  scale_y_continuous(\n    labels = ~ paste0(.x / 1000, \"k\"),\n    limits = c(0, max_val * 1.1) \n  ) +\n  theme_minimal() +\n  theme(axis.text.y = element_text(size = 7),\n        plot.margin = margin(r = 30)) +  \n  labs(title = \"Interactive Total Population by Planning Area (2024)\",\n       x = \"Planning Area\", y = \"Total Population\")\n\n\n\n4.3.4 Step 4: Render Interactive Widget\nWe render the final output using girafe(), and customize the tooltip style with CSS.\n\ngirafe(ggobj = gg,\n       width_svg = 8, height_svg = 6,\n       options = list(\n         opts_tooltip(css = \"background-color:white;color:black;border:1px solid gray;padding:5px;\"),\n         opts_hover(css = \"fill-opacity:0.8;cursor:pointer;\")\n       ))\n\n\n\n\n\n\n\n\n\n\n\nInterpretation\n\n\n\nHighly populated areas such as Tampines, Bedok, and Sengkang stand out, reinforcing their role as major residential zones requiring more public services, infrastructure, and transport support."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#conclusion-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#conclusion-1",
    "title": "Take-home Exercise 1",
    "section": "6.1 Conclusion",
    "text": "6.1 Conclusion\nThis take-home exercise demonstrates how demographic data‚Äîwhen effectively cleaned, grouped, and visualized‚Äîcan provide valuable insights for government and planners. Visualizing age structures, gender distribution, and population concentrations can guide more equitable and efficient decisions in housing, transportation, healthcare, and education."
  }
]