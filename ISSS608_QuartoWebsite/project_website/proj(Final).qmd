---
title: "prototype"
format: html
---

# Import Data

```{r}
#| code-fold: true
#| warning: false
pacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph, dplyr)
```

```{r}
#| code-fold: true
#| warning: false
kg <- fromJSON("data/MC1_graph.json")
```

# Data Wrangling

## Inspect structure

```{r}
#| code-fold: true
#| warning: false
str(kg, max.level = 1)
```

## Extracting the edges and nodes tables

```{r}
#| code-fold: true
#| warning: false
nodes_tbl <- as_tibble(kg$nodes)
edges_tbl <- as_tibble(kg$links) 
```

```{r}
#| code-fold: true
#| warning: false
ggplot(data = edges_tbl,
       aes(y = `Edge Type`)) +
       geom_bar()
```

This ensures each id from node list is mapped to the correct row number

### Step 2: Map source and target IDS to row indices

```{r}
#| code-fold: true
#| warning: false
id_map <- tibble(id = nodes_tbl$id,
                 index = seq_len(
                   nrow(nodes_tbl)))
```

### Step 2: Map source and target IDS to row indices

```{r}
#| code-fold: true
#| warning: false
edges_tbl <- edges_tbl %>%
  left_join(id_map, by = c("source" = "id")) %>%
  rename(from = index) %>%
  left_join(id_map, by = c("target" = "id")) %>%
  rename(to = index)
```

### Step 3: Filter out any unmatched (invalid) edges

```{r}
#| code-fold: true
#| warning: false
edges_tbl <- edges_tbl %>%
  filter(!is.na(from), !is.na(to))
```

### Step 4: Creating the graph

Lastly, `tbl_graph()` is used to create tiidygraph's graph object by using the code chunk below

```{r}
#| code-fold: true
#| warning: false
graph <- tbl_graph(nodes = nodes_tbl, 
                   edges = edges_tbl, 
                   directed = kg$directed)
```

### Set the seed

```{r}
#| code-fold: true
#| warning: false
set.seed(1234)
```

```{r}
sailor_id <- nodes_tbl %>% filter(name == "Sailor Shift") %>% pull(id)

sailor_albums <- edges_tbl %>%
  filter(source == sailor_id,
         `Edge Type` == "PerformerOf") %>%
  pull(target)

song_album_edges <- edges_tbl %>%
  filter(`Edge Type` == "ContainedIn",
         target %in% sailor_albums)

sailor_songs_pre2028 <- nodes_tbl %>%
  filter(id %in% song_album_edges$source,
         `Node Type` == "Song",
         !is.na(release_date),
         !is.na(as.integer(release_date)),
         as.integer(release_date) < 2028)

```

```{r}
sailor_id <- nodes_tbl %>% 
  filter(name == "Sailor Shift") %>% 
  pull(id)

sailor_works <- edges_tbl %>%
  filter(source == sailor_id, `Edge Type` == "PerformerOf") %>%
  pull(target)

sailor_notable_works <- nodes_tbl %>%
  filter(id %in% sailor_works,
         notable == TRUE)

```

```{r}
sailor_notable_works
```

```{r}
library(tidyverse)
library(visNetwork)


edge_types <- c("ComposerOf", "LyricistOf", "PerformerOf", "ProducerOf",
                "RecordedBy", "DistributedBy", "DirectlySamples", "CoverOf",
                "InterpolatesFrom", "LyricalReferenceTo", "InStyleOf")


linked_edges <- edges_tbl %>%
  filter(`Edge Type` %in% edge_types,
         source %in% sailor_notable_works$id | target %in% sailor_notable_works$id) %>%
  mutate(type = `Edge Type`) %>%
  select(from = source, to = target, type)


related_node_ids <- unique(c(linked_edges$from, linked_edges$to))

graph_nodes <- nodes_tbl %>%
  filter(id %in% related_node_ids) %>%
  mutate(label = name,
         group = `Node Type`,
         title = paste0("<b>", name, "</b><br>Type: ", `Node Type`, 
                        "<br>Genre: ", genre, 
                        "<br>Notable: ", notable))


node_degree <- linked_edges %>%
  pivot_longer(cols = c(from, to), values_to = "id") %>%
  count(id, name = "degree")

graph_nodes <- graph_nodes %>%
  left_join(node_degree, by = "id") %>%
  mutate(size = 10 + degree * 1.5)


visNetwork(graph_nodes, linked_edges, height = "700px", width = "100%") %>%
  visEdges(arrows = "to", color = list(color = "gray")) %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
  visLegend(useGroups = TRUE) %>%
  visLayout(randomSeed = 123) %>%
  visGroups(groupname = "Song", color = "lightblue") %>%
  visGroups(groupname = "Album", color = "lightgreen") %>%
  visGroups(groupname = "Person", color = "orange") %>%
  visGroups(groupname = "RecordLabel", color = "pink")

```

```{r}

edge_color_map <- c(
  "ComposerOf" = "#1f77b4",
  "LyricistOf" = "#ff7f0e",
  "PerformerOf" = "#2ca02c",
  "ProducerOf" = "#d62728",
  "RecordedBy" = "#9467bd",
  "DistributedBy" = "#8c564b",
  "DirectlySamples" = "#e377c2",
  "CoverOf" = "#7f7f7f",
  "InterpolatesFrom" = "#bcbd22",
  "LyricalReferenceTo" = "#17becf",
  "InStyleOf" = "#aec7e8"
)


linked_edges <- edges_tbl %>%
  filter(`Edge Type` %in% names(edge_color_map),
         source %in% sailor_notable_works$id | target %in% sailor_notable_works$id) %>%
  transmute(
    from = source,
    to = target,
    label = `Edge Type`,
    title = paste("Edge Type:", `Edge Type`),
    color = edge_color_map[`Edge Type`]
  )

```

```{r}
visNetwork(graph_nodes, linked_edges, height = "700px", width = "100%") %>%
  visEdges(arrows = "to", color = list(color = "gray")) %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
  visLegend(useGroups = TRUE) %>%
  visLayout(randomSeed = 123) %>%
  visGroups(groupname = "Song", color = "lightblue") %>%
  visGroups(groupname = "Album", color = "lightgreen") %>%
  visGroups(groupname = "Person", color = "orange") %>%
  visGroups(groupname = "RecordLabel", color = "pink")

```

```{r}
sailor_work_ids_by_date <- nodes_tbl %>%
  filter(
    `Node Type` %in% c("Song", "Album"),
    !is.na(release_date),
    as.integer(release_date) < 2028,
    id %in% edges_tbl$target[edges_tbl$source == sailor_id & edges_tbl$`Edge Type` == "PerformerOf"]
  ) %>%
  pull(id)

graph_nodes <- graph_nodes %>%
  mutate(category = case_when(
    id == sailor_id ~ "Sailor",
    id %in% sailor_work_ids_by_date ~ "SailorWork",
    TRUE ~ "Other"
  ))

```

```{r}
related_edges_to_works <- linked_edges %>%
  filter(from %in% sailor_notable_works$id | to %in% sailor_notable_works$id)

other_node_connection <- related_edges_to_works %>%
  pivot_longer(cols = c(from, to), values_to = "id") %>%
  filter(!id %in% c(sailor_id, sailor_notable_works$id)) %>%
  count(id, name = "connection_to_works")

```

```{r}
graph_nodes <- graph_nodes %>%
  left_join(other_node_connection, by = "id") %>%
  mutate(
    size = case_when(
      category == "Sailor" ~ 40,
      category == "SailorWork" ~ 30,
      TRUE ~ 10 + 2 * connection_to_works 
    ),
    
    color = case_when(
      category == "Sailor" ~ "#1f78b4",    
      category == "SailorWork" ~ "#a6cee3", 
      TRUE ~ colorRampPalette(c("#eeeeee", "#ff3300"))(max(connection_to_works, na.rm = TRUE))[connection_to_works]
    )
  )

```

```{r}
visNetwork(graph_nodes, linked_edges, height = "700px", width = "100%") %>%
  visEdges(arrows = "to") %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 123)

```

```{r}

influence_edges <- edges_tbl %>%
  filter(`Edge Type` %in% c("DirectlySamples", "InterpolatesFrom", "LyricalReferenceTo", "InStyleOf"),
         source %in% sailor_notable_works$id)


influenced_song_ids <- influence_edges$target

influenced_songs <- nodes_tbl %>%
  filter(id %in% influenced_song_ids,
         `Node Type` == "Song")


creator_edges <- edges_tbl %>%
  filter(`Edge Type` %in% c("ComposerOf", "LyricistOf", "PerformerOf", "ProducerOf"),
         target %in% influenced_songs$id)


creator_node_ids <- unique(creator_edges$source)
all_graph_node_ids <- unique(c(influenced_songs$id, creator_node_ids))

graph_nodes <- nodes_tbl %>%
  filter(id %in% all_graph_node_ids) %>%
  mutate(label = name,
         group = `Node Type`,
         title = paste0("<b>", name, "</b><br>Type: ", `Node Type`, "<br>Genre: ", genre))


creator_degrees <- creator_edges %>%
  count(source, name = "connection_count")

graph_nodes <- graph_nodes %>%
  left_join(creator_degrees, by = c("id" = "source")) %>%
  mutate(
    size = case_when(
      `Node Type` == "Song" ~ 20,
      TRUE ~ 10 + 2 * connection_count
    ),
    color = case_when(
      `Node Type` == "Song" ~ "#a6cee3", 
      TRUE ~ colorRampPalette(c("#eeeeee", "#ff3300"))(max(connection_count, na.rm = TRUE))[connection_count]
    )
  )


creator_edges_vis <- creator_edges %>%
  transmute(from = source,
            to = target,
            label = `Edge Type`,
            title = paste("Role:", `Edge Type`),
            color = "#999999")


visNetwork(graph_nodes, creator_edges_vis, height = "700px", width = "100%") %>%
  visEdges(arrows = "to") %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 123)

```

```{r}
library(ggplot2)

nodes_tbl %>%
  filter(`Node Type` == "Song", genre == "Oceanus Folk", !is.na(release_date)) %>%
  mutate(release_year = as.integer(release_date)) %>%
  filter(!is.na(release_year)) %>%
  ggplot(aes(x = release_year)) +
  geom_histogram(binwidth = 1, fill = "#66c2a5", color = "black") +
  labs(title = "Number of Oceanus Folk Songs Over Time",
       x = "Release Year", y = "Number of Songs") +
  theme_minimal()

```

```{r}
nodes_tbl %>%
  filter(`Node Type` == "Song", genre == "Oceanus Folk", notable == TRUE, !is.na(release_date)) %>%
  mutate(release_year = as.integer(release_date)) %>%
  filter(!is.na(release_year)) %>%
  ggplot(aes(x = release_year)) +
  geom_histogram(binwidth = 1, fill = "#fc8d62", color = "black") +
  labs(title = "Number of Notable Oceanus Folk Songs Over Time",
       x = "Release Year", y = "Number of Notable Songs") +
  theme_minimal()


```

```{r}
library(ggplot2)
library(dplyr)


all_folk <- nodes_tbl %>%
  filter(`Node Type` == "Song", genre == "Oceanus Folk", !is.na(release_date)) %>%
  mutate(release_year = as.integer(release_date)) %>%
  count(release_year) %>%
  mutate(type = "All Oceanus Folk")

notable_folk <- nodes_tbl %>%
  filter(`Node Type` == "Song", genre == "Oceanus Folk", notable == TRUE, !is.na(release_date)) %>%
  mutate(release_year = as.integer(release_date)) %>%
  count(release_year) %>%
  mutate(type = "Notable Oceanus Folk")


folk_trend <- bind_rows(all_folk, notable_folk)


ggplot(folk_trend, aes(x = release_year, y = n, color = type)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  labs(title = "Oceanus Folk Songs vs Notable Ones Over Time",
       x = "Release Year", y = "Number of Songs", color = "Song Type") +
  theme_minimal()


```

```{r}
library(ggplot2)
library(dplyr)


all_folk <- nodes_tbl %>%
  filter(`Node Type` == "Song", genre == "Oceanus Folk", !is.na(release_date)) %>%
  mutate(release_year = as.integer(release_date)) %>%
  count(release_year) %>%
  mutate(type = "All Oceanus Folk")


notable_folk <- nodes_tbl %>%
  filter(`Node Type` == "Song", genre == "Oceanus Folk", notable == TRUE, !is.na(release_date)) %>%
  mutate(release_year = as.integer(release_date)) %>%
  count(release_year) %>%
  mutate(type = "Notable Oceanus Folk")


folk_trend <- bind_rows(all_folk, notable_folk)


ggplot(folk_trend, aes(x = release_year, y = n, color = type)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  geom_vline(xintercept = 2028, linetype = "dashed", color = "grey30", linewidth = 1) +
  annotate("text", x = 2028, y = max(folk_trend$n, na.rm = TRUE), 
           label = "Sailor Shift goes viral", vjust = -0.5, hjust = 1.1, size = 4) +
  labs(title = "Oceanus Folk Songs vs Notable Ones Over Time",
       x = "Release Year", y = "Number of Songs", color = "Song Type") +
  theme_minimal()


```

### Final Version

```{r}
library(ggplot2)
library(dplyr)
library(plotly)


all_folk <- nodes_tbl %>%
  filter(`Node Type` == "Song", genre == "Oceanus Folk", !is.na(release_date)) %>%
  mutate(release_year = as.integer(release_date),
         notable = FALSE) %>%
  count(release_year, notable, name = "count")

notable_folk <- nodes_tbl %>%
  filter(`Node Type` == "Song", genre == "Oceanus Folk", notable == TRUE, !is.na(release_date)) %>%
  mutate(release_year = as.integer(release_date),
         notable = TRUE) %>%
  count(release_year, notable, name = "count")


trend_data <- bind_rows(all_folk, notable_folk) %>%
  mutate(type = ifelse(notable, "Notable Oceanus Folk", "All Oceanus Folk"))


p <- ggplot(trend_data, aes(x = release_year, y = count, color = type, group = type,
                            text = paste0("Year: ", release_year,
                                          "<br>Count: ", count,
                                          "<br>Notable: ", notable))) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  geom_vline(xintercept = 2028, linetype = "dashed", color = "gray40", linewidth = 1) +
  annotate("text", x = 2028, y = max(trend_data$count), label = "Sailor viral", vjust = -0.5, hjust = 1.1) +
  labs(title = "Interactive Trend of Oceanus Folk Songs",
       x = "Release Year", y = "Song Count", color = "Type") +
  theme_minimal()


ggplotly(p, tooltip = "text")


```

```{r}
library(tidyverse)
library(visNetwork)


oceanus_folk_works <- nodes_tbl %>%
  filter(`Node Type` %in% c("Song", "Album"),
         genre == "Oceanus Folk")


edge_types <- c("DirectlySamples", "InterpolatesFrom", "LyricalReferenceTo", "InStyleOf")


linked_edges <- edges_tbl %>%
  filter(`Edge Type` %in% edge_types,
         source %in% oceanus_folk_works$id | target %in% oceanus_folk_works$id) %>%
  mutate(type = `Edge Type`) %>%
  select(from = source, to = target, type)


related_node_ids <- unique(c(linked_edges$from, linked_edges$to))

graph_nodes <- nodes_tbl %>%
  filter(id %in% related_node_ids) %>%
  mutate(
    label = name,
    group = genre,  
    title = paste0("<b>", name, "</b><br>Type: ", `Node Type`, 
                   "<br>Genre: ", genre, 
                   "<br>Notable: ", notable)
  )


node_degree <- linked_edges %>%
  pivot_longer(cols = c(from, to), values_to = "id") %>%
  count(id, name = "degree")

graph_nodes <- graph_nodes %>%
  left_join(node_degree, by = "id") %>%
  mutate(size = 10 + degree * 1.5)


visNetwork(graph_nodes, linked_edges, height = "700px", width = "100%") %>%
  visEdges(arrows = "to", color = list(color = "gray")) %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
  visLegend(useGroups = TRUE) %>%
  visLayout(randomSeed = 123)



```

```{r}
library(tidyverse)
library(visNetwork)


oceanus_folk_works <- nodes_tbl %>%
  filter(`Node Type` %in% c("Song", "Album"),
         genre == "Oceanus Folk")


edge_types <- c("DirectlySamples", "InterpolatesFrom", "LyricalReferenceTo", "InStyleOf")


linked_edges <- edges_tbl %>%
  filter(`Edge Type` %in% edge_types,
         source %in% oceanus_folk_works$id | target %in% oceanus_folk_works$id) %>%
  mutate(type = `Edge Type`) %>%
  select(from = source, to = target, type)


related_node_ids <- unique(c(linked_edges$from, linked_edges$to))

graph_nodes <- nodes_tbl %>%
  filter(id %in% related_node_ids) %>%
  mutate(label = name,
         group = genre, 
         title = paste0("<b>", name, "</b><br>Type: ", `Node Type`, 
                        "<br>Genre: ", genre, 
                        "<br>Notable: ", notable))


node_degree <- linked_edges %>%
  pivot_longer(cols = c(from, to), values_to = "id") %>%
  count(id, name = "degree")

graph_nodes <- graph_nodes %>%
  left_join(node_degree, by = "id") %>%
  mutate(
    degree = replace_na(degree, 0),
    size = 10 + degree * 1.5,
    

    color = case_when(
      genre == "Oceanus Folk" ~ "#999999", 
      TRUE ~ colorRampPalette(c("#fee5d9", "#de2d26"))(max(degree, na.rm = TRUE))[degree]
    )
  )


visNetwork(graph_nodes, linked_edges, height = "700px", width = "100%") %>%
  visEdges(arrows = "to", color = list(color = "gray")) %>%
  visNodes(color = list(background = graph_nodes$color)) %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
  visLegend(useGroups = TRUE) %>%
  visLayout(randomSeed = 123)

```

```{r}

```

```{r}
library(tidyverse)


edge_types <- c("DirectlySamples", "InterpolatesFrom", "LyricalReferenceTo", "InStyleOf")


oceanus_targets <- nodes_tbl %>%
  filter(`Node Type` %in% c("Song", "Album"),
         genre == "Oceanus Folk") %>%
  pull(id)


influencing_edges <- edges_tbl %>%
  filter(`Edge Type` %in% edge_types,
         target %in% oceanus_targets)


influencing_genres <- influencing_edges %>%
  left_join(nodes_tbl %>% select(id, genre), by = c("source" = "id")) %>%
  filter(!is.na(genre))


genre_influence_count <- influencing_genres %>%
  count(genre, name = "count") %>%
  arrange(desc(count))


ggplot(genre_influence_count, aes(x = reorder(genre, count), y = count)) +
  geom_col(fill = "steelblue") +
  coord_flip() +
  labs(title = "Genres being Most Influenced  by Oceanus Folk",
       x = "Genre",
       y = "Number of Influential Edges (to Oceanus Folk)") +
  theme_minimal()


```

```{r}


```

```{r}


```

```{r}


```
