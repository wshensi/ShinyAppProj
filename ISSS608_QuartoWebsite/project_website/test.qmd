---
title: "test"
---

```{r}
# 加载必要的库
pacman::p_load(tidyverse, jsonlite, tidygraph, visNetwork)

# 读取 JSON 图数据
kg <- fromJSON("data/MC1_release/MC1_graph.json")
nodes_tbl <- as_tibble(kg$nodes)
edges_tbl <- as_tibble(kg$links)

# 创建 source/target 对应的 from/to 索引映射
id_map <- tibble(id = nodes_tbl$id, index = seq_len(nrow(nodes_tbl)))
edges_tbl <- edges_tbl %>%
  left_join(id_map, by = c("source" = "id")) %>%
  rename(from = index) %>%
  left_join(id_map, by = c("target" = "id")) %>%
  rename(to = index) %>%
  filter(!is.na(from), !is.na(to))  # 移除无效边

# 创建 tidygraph 图对象（可选）
graph <- tbl_graph(nodes = nodes_tbl, edges = edges_tbl, directed = kg$directed)

# 获取 Sailor Shift 的 ID
sailor_id <- nodes_tbl %>% filter(name == "Sailor Shift") %>% pull(id)

# 获取 Sailor Shift 的 PerformerOf 边对应的作品
sailor_works <- edges_tbl %>%
  filter(source == sailor_id, `Edge Type` == "PerformerOf") %>%
  pull(target)

# 提取其中 notable 的作品
sailor_notable_works <- nodes_tbl %>%
  filter(id %in% sailor_works, notable == TRUE)

# 定义关注的边类型（音乐创作、制作、风格等）
edge_types <- c("ComposerOf", "LyricistOf", "PerformerOf", "ProducerOf",
                "RecordedBy", "DistributedBy", "DirectlySamples", "CoverOf",
                "InterpolatesFrom", "LyricalReferenceTo", "InStyleOf")

# 构建与作品相关的边（双向）
linked_edges <- edges_tbl %>%
  filter(`Edge Type` %in% edge_types,
         source %in% sailor_notable_works$id | target %in% sailor_notable_works$id) %>%
  mutate(type = `Edge Type`) %>%
  select(from = source, to = target, type)

# 提取参与这些边的所有节点
related_node_ids <- unique(c(linked_edges$from, linked_edges$to))

# 构建图用的节点表，设置标签与分组信息
graph_nodes <- nodes_tbl %>%
  filter(id %in% related_node_ids) %>%
  mutate(label = name,
         group = `Node Type`,
         title = paste0("<b>", name, "</b><br>Type: ", `Node Type`,
                        "<br>Genre: ", genre,
                        "<br>Notable: ", notable))

# 计算 degree 设置初始大小
node_degree <- linked_edges %>%
  pivot_longer(cols = c(from, to), values_to = "id") %>%
  count(id, name = "degree")

graph_nodes <- graph_nodes %>%
  left_join(node_degree, by = "id") %>%
  mutate(size = 10 + degree * 1.5)

# 分类 Sailor 本人、作品与其他节点
sailor_work_ids_by_date <- nodes_tbl %>%
  filter(
    `Node Type` %in% c("Song", "Album"),
    !is.na(release_date),
    as.integer(release_date) < 2028,
    id %in% sailor_works
  ) %>%
  pull(id)

graph_nodes <- graph_nodes %>%
  mutate(category = case_when(
    id == sailor_id ~ "Sailor",
    id %in% sailor_work_ids_by_date ~ "SailorWork",
    TRUE ~ "Other"
  ))

# 统计其他节点与作品连接次数（越多越重要）
related_edges_to_works <- linked_edges %>%
  filter(from %in% sailor_notable_works$id | to %in% sailor_notable_works$id)

other_node_connection <- related_edges_to_works %>%
  pivot_longer(cols = c(from, to), values_to = "id") %>%
  filter(!id %in% c(sailor_id, sailor_notable_works$id)) %>%
  count(id, name = "connection_to_works")

# 结合连接数设置节点颜色与大小
graph_nodes <- graph_nodes %>%
  left_join(other_node_connection, by = "id") %>%
  mutate(
    size = case_when(
      category == "Sailor" ~ 40,
      category == "SailorWork" ~ 30,
      TRUE ~ 10 + 2 * connection_to_works
    ),
    color = case_when(
      category == "Sailor" ~ "#1f78b4",         # 深蓝
      category == "SailorWork" ~ "#a6cee3",     # 浅蓝
      TRUE ~ colorRampPalette(c("#eeeeee", "#ff3300"))(max(connection_to_works, na.rm = TRUE))[connection_to_works]
    )
  )

# 可视化最终网络图
visNetwork(graph_nodes, linked_edges, height = "370px", width = "90%") %>%
  visEdges(arrows = "to") %>%
  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 123)

```
