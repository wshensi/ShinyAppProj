{
  "hash": "4295a68213fcd866a28bfbad0ced5ee1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 9 (Part 1 & 2)\"\ndescription: \"Visual Multivariate Analysis\" \ndate: \"June 19, 2025\" \ndate-modified: \"June 19, 2025\" \nformat: html\nauthor: \"Wang Shen Si\" \neditor: visual \nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n# **Creating Ternary Plot with R**\n\n## **Overview**\n\nTernary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\n\nIn this hands-on, you will learn how to build ternary plot programmatically using R for visualising and analysing population structure of Singapore.\n\nThe hands-on exercise consists of four steps:\n\n-   Install and launch **tidyverse** and **ggtern** packages.\n\n-   Derive three new measures using *mutate()* function of **dplyr** package.\n\n-   Build a static ternary plot using *ggtern()* function of **ggtern** package.\n\n-   Build an interactive ternary plot using *plot-ly()* function of **Plotly R** package.\n\n## **Installing and launching R packages**\n\nFor this exercise, two main R packages will be used in this hands-on exercise, they are:\n\n-   [**ggtern**](http://www.ggtern.com/), a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.\n\n-   [**Plotly R**](https://plot.ly/r/), an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js . The **plotly R** libary contains the *ggplotly* function, which will convert **ggplot2** figures into a Plotly object.\n\nWe will also need to ensure that selected **tidyverse** family packages namely: **readr**, **dplyr** and **tidyr** are also installed and loaded.\n\nThe code chunks below will accomplish the task.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(plotly, ggtern, tidyverse)\n```\n:::\n\n\n\n## **Data Preparation**\n\n### **The data**\n\nFor the purpose of this hands-on exercise, the [Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data) data will be used. The data set has been downloaded and included in the data sub-folder of the hands-on exercise folder. It is called *respopagsex2000to2018_tidy.csv* and is in csv file format.\n\n### **Importing Data**\n\nTo important *respopagsex2000to2018_tidy.csv* into R, ***read_csv()*** function of **readr** package will be used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Reading the data into R environment\npop_data <- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n```\n:::\n\n\n\n### **Preparing the Data**\n\nNext, use the ***mutate()*** function of **dplyr** package to derive three new measures, namely: young, active, and old.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Deriving the young, economy active and old measures\nagpop_mutated <- pop_data %>%\n  mutate(`Year` = as.character(Year))%>%\n  spread(AG, Population) %>%\n  mutate(YOUNG = rowSums(.[4:8]))%>%\n  mutate(ACTIVE = rowSums(.[9:16]))  %>%\n  mutate(OLD = rowSums(.[17:21])) %>%\n  mutate(TOTAL = rowSums(.[22:24])) %>%\n  filter(Year == 2018)%>%\n  filter(TOTAL > 0)\n```\n:::\n\n\n\n## **Plotting Ternary Diagram with R**\n\n### **Plotting a static ternary diagram**\n\nUse ***ggtern()*** function of **ggtern** package to create a simple ternary plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Building the static ternary plot\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Building the static ternary plot\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n### **Plotting an interative ternary diagram**\n\nThe code below create an interactive ternary plot using ***plot_ly()*** function of **Plotly R**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# reusable function for creating annotation object\nlabel <- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis <- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes <- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %>%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-17de41ce5f6fd088fc0c\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-17de41ce5f6fd088fc0c\">{\"x\":{\"visdat\":{\"5b245f034bbd\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"5b245f034bbd\",\"attrs\":{\"5b245f034bbd\":{\"a\":{},\"b\":{},\"c\":{},\"color\":[\"black\"],\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatterternary\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"annotations\":[{\"text\":\"Ternary Markers\",\"x\":0.10000000000000001,\"y\":1,\"ax\":0,\"ay\":0,\"xref\":\"paper\",\"yref\":\"paper\",\"align\":\"center\",\"font\":{\"family\":\"serif\",\"size\":15,\"color\":\"white\"},\"bgcolor\":\"#b3b3b3\",\"bordercolor\":\"black\",\"borderwidth\":2},{\"text\":\"Ternary Markers\",\"x\":0.10000000000000001,\"y\":1,\"ax\":0,\"ay\":0,\"xref\":\"paper\",\"yref\":\"paper\",\"align\":\"center\",\"font\":{\"family\":\"serif\",\"size\":15,\"color\":\"white\"},\"bgcolor\":\"#b3b3b3\",\"bordercolor\":\"black\",\"borderwidth\":2},{\"text\":\"Ternary Markers\",\"x\":0.10000000000000001,\"y\":1,\"ax\":0,\"ay\":0,\"xref\":\"paper\",\"yref\":\"paper\",\"align\":\"center\",\"font\":{\"family\":\"serif\",\"size\":15,\"color\":\"white\"},\"bgcolor\":\"#b3b3b3\",\"bordercolor\":\"black\",\"borderwidth\":2}],\"ternary\":{\"aaxis\":{\"title\":\"Young\",\"tickformat\":\".0%\",\"tickfont\":{\"size\":10}},\"baxis\":{\"title\":\"Active\",\"tickformat\":\".0%\",\"tickfont\":{\"size\":10}},\"caxis\":{\"title\":\"Old\",\"tickformat\":\".0%\",\"tickfont\":{\"size\":10}}},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"a\":[1330,5880,5430,4930,1960,3580,2170,4570,1150,6130,2030,19180,7100,11210,9260,9430,8710,1440,6480,8280,7210,1550,6830,2990,4350,4010,2770,3430,5500,6780,3170,420,3020,260,1670,1720,2380,1810,800,3100,3880,2470,1940,2810,3780,5610,2050,8740,8520,1130,8270,6600,5980,1970,1860,2860,3410,1760,1650,2960,120,620,6520,10920,10900,10000,6620,12980,3160,6320,3640,3850,1840,1420,1960,130,30,130,90,8490,7330,2990,6460,1200,6550,10340,7850,6780,7450,3670,12190,120,150,4840,3930,5670,4940,8920,13710,19300,11640,2690,20320,7740,2560,1490,2500,150,2360,2110,2940,10,630,2410,6740,2770,20,30,980,360,270,40,370,7380,1110,860,2850,200,100,10,120,180,2440,1230,10,4220,570,0,9370,16820,2440,11730,16130,70,15940,5790,16050,1380,2930,3090,2350,180,4060,3650,110,170,1140,800,10,50,30,2290,960,720,480,320,60,210,600,0,650,30,270,50,470,260,90,4440,9320,2570,8230,1920,550,14340,6670,17850,18300,18460,2460,3770,5230,8460,4580,3820,0,10,740,510,170,10740,35900,22030,470,1650,2870,370,970,3070,2360,1850,1690,1530,2380,2240,1330,7210,2760,710,230,12150,3200,10730,31770,14070,8330,2330,5470,240,7480,1190,320,17730,9990,13540],\"b\":[2770,16970,15700,13300,3620,9600,4650,12580,2410,14580,4360,48300,15570,27340,19350,23190,22610,3560,17330,18000,16800,3280,16220,8330,9350,9370,5900,8010,11410,16640,7850,910,8660,610,3750,4840,6340,5330,1980,7070,10570,7080,5600,7550,9150,14000,4050,16960,19480,2260,15840,12220,12530,3360,3510,4930,5870,3670,3120,5930,370,820,12890,19140,19690,20320,15130,25120,7860,17070,9420,8970,3380,3390,3480,510,190,510,450,24310,18320,7710,16440,2860,15680,28800,18270,15160,19160,8080,26570,280,540,11110,9510,15270,11830,17800,32920,40760,22960,4960,41410,21590,7150,4930,6980,530,6240,5790,6670,40,1250,5500,15070,5990,200,110,2210,690,580,160,960,19220,2050,1490,5370,390,250,100,270,890,6440,3910,230,8830,1290,0,18550,33140,4480,21430,28870,140,28320,10780,28590,4320,6350,7460,7450,520,8820,9150,140,460,2730,1970,70,210,70,6810,2160,1820,1130,890,140,780,1710,100,1980,90,950,160,1180,1140,140,8480,18720,5520,15810,3590,1000,26160,12930,31820,36400,37430,4880,7790,15440,21410,9730,9720,100,120,1790,1190,390,24500,81520,48300,1090,4050,5320,810,2100,7410,5650,4810,4900,4220,6170,6730,3040,16770,8270,1470,430,21000,7640,20770,58380,24020,18380,6640,9140,550,18000,2350,850,34470,25550,34480],\"c\":[730,5480,5960,4780,1200,3360,1300,4800,640,4270,850,15150,3190,9530,5460,5850,7230,1560,4920,3990,5520,260,3600,1990,1340,2100,1430,1660,2110,3400,3240,100,3510,250,970,1840,2780,2350,410,1960,3510,3120,2260,2450,2740,3320,620,2800,3930,430,2220,1890,3590,1070,880,1320,1390,1060,860,1880,110,50,2100,2830,2180,3370,3510,3350,2830,6130,2780,2930,670,1240,750,220,0,30,70,7240,5530,1600,5170,710,2830,7180,4180,3810,5880,2470,5540,10,220,3350,1800,4550,3170,3500,8240,5650,4050,740,7140,6700,2530,2560,2500,160,2150,1830,1460,10,250,1490,5720,1590,20,10,540,130,150,30,280,5760,750,480,1000,140,100,0,70,450,2070,2200,50,1600,300,170,2650,6040,340,3060,2950,40,4160,910,2870,1760,2040,3020,3410,140,2150,3040,0,20,540,510,20,50,0,2700,390,300,320,260,0,300,520,40,830,0,120,40,530,540,0,1260,2500,400,2170,720,180,3250,1590,4160,5990,5410,1210,2360,4480,7430,1970,2700,20,10,200,100,150,5150,17670,9660,180,800,1240,250,580,3120,2010,1310,1710,1810,2260,2350,1040,4900,3260,260,70,2830,2050,3080,6910,3080,4090,1570,700,150,3560,690,210,4740,5330,7770],\"type\":\"scatterternary\",\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(0,0,0,1)\",\"line\":{\"color\":\"rgba(0,0,0,1)\"}},\"textfont\":{\"color\":\"rgba(0,0,0,1)\"},\"line\":{\"color\":\"rgba(0,0,0,1)\"},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n# **Visual Correlation Analysis**\n\n## **Overview**\n\nCorrelation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\n\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\n\nThere are three broad reasons for computing a correlation matrix.\n\n-   To reveal the relationship between high-dimensional variables pair-wisely.\n\n-   To input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\n\n-   As a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, [Corrgram](http://www.datavis.ca/papers/corrgram.pdf) tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\n-   Rendering the value of a correlation to depict its sign and magnitude, and\n\n-   Reordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\n\nIn this hands-on exercise, you will learn how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, you will learn how to create correlation matrix using [*pairs()*](https://www.rdocumentation.org/packages/graphics/versions/3.6.0/topics/pairs) of R Graphics. Next, you will learn how to plot corrgram using **corrplot** package of R. Lastly, you will learn how to create an interactive correlation matrix using plotly R.\n\n## **Installing and Launching R Packages**\n\nBefore you get started, you are required to open a new Quarto document. Keep the default html authoring format.\n\nNext, you will use the code chunk below to install and launch **corrplot**, **ggpubr**, **plotly** and **tidyverse** in RStudio.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n```\n:::\n\n\n\n## **Importing and Preparing The Data Set**\n\nIn this hands-on exercise, the [Wine Quality Data Set](https://archive.ics.uci.edu/ml/datasets/wine+quality) of UCI Machine Learning Repository will be used. The data set consists of 13 variables and 6497 observations. For the purpose of this exercise, we have combined the red wine and white wine data into one data file. It is called wine_quality and is in csv file format.\n\n### **Importing Data**\n\nFirst, let us import the data into R by using *read_csv()* of **readr** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine <- read_csv(\"data/wine_quality.csv\")\n```\n:::\n\n\n\nNotice that beside quality and type, the rest of the variables are numerical and continuous data type.\n\n## **Building Correlation Matrix: *pairs()* method**\n\nThere are more than one way to build scatterplot matrix with R. In this section, you will learn how to create a scatterplot matrix by using the *pairs* function of R Graphics.\n\nBefore you continue to the next step, you should read the syntax description of [*pairs*](https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/pairs.html)function.\n\n### **Building a basic correlation matrix**\n\nFigure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,1:11])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\nThe required input of *pairs()* can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default *pairs* function. Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n### **Drawing the lower corner**\n\n*pairs* function of R Graphics provided many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.\n\nTo show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12], upper.panel = NULL)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nSimilarly, you can display the upper half of the correlation matrix by using the code chun below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12], lower.panel = NULL)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n### **Including with correlation coefficients**\n\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, [*panel.cor*](https://www.rdocumentation.org/packages/xcms/versions/1.48.0/topics/panel.cor) function will be used. This will also show higher correlations in a larger font.\n\nDon’t worry about the details for now-just type this code into your R session or script. Let’s have more fun way to display the correlation matrix.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npanel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr <- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr <- abs(cor(x, y, use=\"complete.obs\"))\ntxt <- format(c(r, 0.123456789), digits=digits)[1]\ntxt <- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n## **Visualising Correlation Matrix: ggcormat()**\n\nOne of the major limitation of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations). To over come this problem, **Corrgram** data visualisation technique suggested by D. J. Murdoch and E. D. Chow (1996) and Friendly, M (2002) and will be used.\n\nThe are at least three R packages provide function to plot corrgram, they are:\n\n-   [corrgram](https://cran.r-project.org/web/packages/corrgram/index.html)\n\n-   [ellipse](https://cran.r-project.org/web/packages/ellipse/index.html)\n\n-   [corrplot](https://cran.r-project.org/web/packages/corrplot/index.html)\n\nOn top that, some R package like ggstatsplot package also provides functions for building corrgram.\n\nIn this section, you will learn how to visualising correlation matrix by using [*ggcorrmat()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcorrmat.html) of [**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/index.html) package.\n\n### **The basic plot**\n\nOn of the advantage of using *ggcorrmat()* over many other methods to visualise a correlation matrix is it’s ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p < 0.05\"\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\nThings to learn from the code chunk above:\n\n-   `cor.vars` argument is used to compute the correlation matrix needed to build the corrgram.\n\n-   `ggcorrplot.args` argument provide additional (mostly aesthetic) arguments that will be passed to [`ggcorrplot::ggcorrplot`](http://www.sthda.com/english/wiki/ggcorrplot-visualization-of-a-correlation-matrix-using-ggplot2) function. The list should avoid any of the following arguments since they are already internally being used: `corr`, `method`, `p.mat`, `sig.level`, `ggtheme`, `colors`, `lab`, `pch`, `legend.title`, `digits`.\n\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))\n```\n:::\n\n\n\n## **Building multiple plots**\n\nSince ggstasplot is an extension of ggplot2, it also supports faceting. However the feature is not available in *ggcorrmat()* but in the [*grouped_ggcorrmat()*](https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggcorrmat.html) of **ggstatsplot**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\nThings to learn from the code chunk above:\n\n-   to build a facet plot, the only argument needed is `grouping.var`.\n\n-   Behind *group_ggcorrmat()*, **patchwork** package is used to create the multiplot. `plotgrid.args` argument provides a list of additional arguments passed to [*patchwork::wrap_plots*](https://patchwork.data-imaginist.com/reference/wrap_plots.html), except for guides argument which is already separately specified earlier.\n\n-   Likewise, `annotation.args` argument is calling [*plot annotation arguments*](https://patchwork.data-imaginist.com/reference/plot_annotation.html) of patchwork package.\n\n## **Visualising Correlation Matrix using corrplot Package**\n\nIn this hands-on exercise, we will focus on corrplot. However, you are encouraged to explore the other two packages too.\n\nBefore getting started, you are required to read [An Introduction to corrplot Package](https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html) in order to gain basic understanding of **corrplot** package.\n\n### **Getting started with corrplot**\n\nBefore we can plot a corrgram using *corrplot()*, we need to compute the correlation matrix of wine data frame.\n\nIn the code chunk below, [*cor()*](https://www.rdocumentation.org/packages/stats/versions/3.6.0/topics/cor) of R Stats is used to compute the correlation matrix of wine data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine.cor <- cor(wine[, 1:11])\n```\n:::\n\n\n\nNext, [*corrplot()*](https://www.rdocumentation.org/packages/corrplot/versions/0.2-0/topics/corrplot) is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\nNotice that the default visual object used to plot the corrgram is circle. The default layout of the corrgram is a symmetric matrix. The default colour scheme is diverging blue-red. Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients. The intensity of the colour or also know as **saturation** is used to represent the strength of the correlation coefficient. Darker colours indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours indicates relatively weaker linear relationship.\n\n### **Working with visual geometrics**\n\nIn **corrplot** package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle. As shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the *method* argument as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\") \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\nFeel free to change the *method* argument to other supported visual geometrics.\n\n### **Working with layout**\n\n*corrplor()* supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the *type* argument of *corrplot()*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\nThe default layout of the corrgram can be further customised. For example, arguments *diag* and *tl.col* are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\nPlease feel free to experiment with other layout design argument such as *tl.pos*, *tl.cex*, *tl.offset*, *cl.pos*, *cl.cex* and *cl.offset*, just to mention a few of them.\n\n### **Working with mixed layout**\n\nWith **corrplot** package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the [*corrplot.mixed()*](https://www.rdocumentation.org/packages/corrplot/versions/0.84/topics/corrplot.mixed), a wrapped function for mixed visualisation style will be used.\n\nFigure below shows a mixed layout corrgram plotted using wine quality data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\nThe code chunk used to plot the corrgram are shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\nNotice that argument *lower* and *upper* are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram. The argument *tl.pos*, on the other, is used to specify the placement of the axis label. Lastly, the *diag* argument is used to specify the glyph on the principal diagonal of the corrgram.\n\n### **Combining corrgram with the significant test**\n\nIn statistical analysis, we are also interested to know which pair of variables their correlation coefficients are statistically significant.\n\nFigure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.\n\nWith corrplot package, we can use the *cor.mtest()* to compute the p-values and confidence interval for each pair of variables.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n```\n:::\n\n\n\nWe can then use the *p.mat* argument of *corrplot* function as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n### **Reorder a corrgram**\n\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the *order* argument of *corrplot()*. Currently, **corrplot** package support four sorting methods, they are:\n\n-   “AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n\n-   “FPC” for the first principal component order.\n\n-   “hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n    -   “hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n-   “alphabet” for alphabetical order.\n\n“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in **seriation** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n### **Reordering a correlation matrix using hclust**\n\nIf using **hclust**, ***corrplot()*** can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex09_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n# **Reference**\n\nMichael Friendly (2002). “Corrgrams: Exploratory displays for correlation matrices”. *The American Statistician*, 56, 316–324.\n\nD.J. Murdoch, E.D. Chow (1996). “A graphical display of large correlation matrices”. *The American Statistician*, 50, 178–180.\n\n## **R packages**\n\n-   [`ggcormat()`](https://indrajeetpatil.github.io/ggstatsplot/articles/web_only/ggcorrmat.html) of [**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/index.html) package\n\n-   [`ggscatmat`](https://ggobi.github.io/ggally/reference/ggscatmat.html) and [`ggpairs`](https://ggobi.github.io/ggally/reference/ggpairs.html) of [**GGally**](https://ggobi.github.io/ggally/index.html).\n\n-   [**corrplot**](https://cran.r-project.org/web/packages/corrplot/index.html). A graphical display of a correlation matrix or general matrix. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.\n\n-   [**corrgram**](https://cran.r-project.org/web/packages/corrgram/index.html) calculates correlation of variables and displays the results graphically. Included panel functions can display points, shading, ellipses, and correlation values with confidence intervals.\n",
    "supporting": [
      "Hands-on_Ex09_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/plotly-binding-4.10.4/plotly.js\"></script>\n<script src=\"../../site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"../../site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"../../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<link href=\"../../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}