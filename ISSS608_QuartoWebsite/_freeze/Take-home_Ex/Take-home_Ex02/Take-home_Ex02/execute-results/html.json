{
  "hash": "928bd6e78bae0deebea885ac692852ca",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 2\"\ndescription: \"Mini Case 1\"\ndate: \"June 01, 2025\"\ndate-modified: \"June 01, 2025\"\nformat: html\nauthor: \"Wang Shen Si\"\neditor: visual\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n# Introduction\n\n## **Getting Started**\n\nFor the purpose of this exercise, four R packages will be used. They are tidyverse, jsonlite, tidygraph and ggraph.\n\nIn the code chunk below, `p_load()` of **pacman** package is used to load the R packages into R environemnt.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, jsonlite,\n               tidygraph, ggraph)\n```\n:::\n\n\n\n## **Importing Kownledge Graph Data**\n\nFor the purpose of this exercise, *MC1_graph.json* file will be used. Before getting started, you should have the data set in the **data** sub-folder.\n\nIn the code chunk below, `fromJSON()` of **jsonlite** package is used to import *MC1_graph.json* file into R and save the output object\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkg <- fromJSON(\"data/MC1_graph.json\")\n```\n:::\n\n\n\n### **Inspect structure**\n\nBefore preparing the data, it is always a good practice to examine the structure of *kg* object.\n\nIn the code chunk below `str()` is used to reveal the structure of *kg* object.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(kg, max.level = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame':\t17412 obs. of  10 variables:\n $ links     :'data.frame':\t37857 obs. of  4 variables:\n```\n\n\n:::\n:::\n\n\n\n## **Extracting the edges and nodes tables**\n\nNext, `as_tibble()` of **tibble** package package is used to extract the nodes and links tibble data frames from *kg* object into two separate tibble data frames called *nodes_tbl* and *edges_tbl* respectively.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes_tbl <- as_tibble(kg$nodes)\nedges_tbl <- as_tibble(kg$links) \n```\n:::\n\n\n\n### **Initial EDA**\n\nIt is time for us to apply appropriate EDA methods to examine the data.\n\nIn this code chunk below, ggplot2 functions are used the reveal the frequency distribution of *Edge Type* field of *edges_tbl*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = edges_tbl,\n       aes(y = `Edge Type`)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nOn the other hands, code chunk below uses ggplot2 functions to reveal the frequency distribution of *Node Type* field of *nodes_tbl*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = nodes_tbl,\n       aes(y = `Node Type`)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n## **Creating Knowledge Graph**\n\n### **Mapping from node id to row index**\n\nBefore we can go ahead to build the tidygraph object, it is important for us to ensures each id from the node list is mapped to the correct row number. This requirement can be achive by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid_map <- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n```\n:::\n\n\n\n### **Map source and target IDs to row indices**\n\nNext, we will map the source and the target IDs to row indices by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_tbl <- edges_tbl %>%\n  left_join(id_map, by = c(\"source\" = \"id\")) %>%\n  rename(from = index) %>%\n  left_join(id_map, by = c(\"target\" = \"id\")) %>%\n  rename(to = index)\n```\n:::\n\n\n\n### **Filter out any unmatched (invalid) edges**\n\nLastly, the code chunk below will be used to exclude the unmatch edges.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_tbl <- edges_tbl %>%\n  filter(!is.na(from), !is.na(to))\n```\n:::\n\n\n\n### **Creating tidygraph**\n\nLastly, `tbl_graph()` is used to create tidygraph’s graph object by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph <- tbl_graph(nodes = nodes_tbl, \n                   edges = edges_tbl, \n                   directed = kg$directed)\n```\n:::\n\n\n\nYou might want to confirm the output object is indeed in tidygraph format by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_graph\" \"igraph\"   \n```\n\n\n:::\n:::\n\n\n\n## **Visualising the knowledge graph**\n\nIn this section, we will use ggraph’s functions to visualise and analyse the graph object.\n\nSeveral of the ggraph layouts involve randomisation. In order to ensure reproducibility, it is necessary to set the seed value before plotting by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n\n\n### **Visualising the whole graph**\n\nIn the code chunk below, ggraph functions are used to visualise the whole graph.\n\n![](image/image01.png){width=\"617\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ggraph(graph, layout = \"fr\") +\n#   geom_edge_link(alpha = 0.3, \n#                  colour = \"gray\") +\n#   geom_node_point(aes(color = `Node Type`), \n#                   size = 4) +\n#   geom_node_text(aes(label = name), \n#                  repel = TRUE, \n#                  size = 2.5) +\n#   theme_void()\n```\n:::\n\n\n\nNotice that the whole graph is very messy and we can hardy discover any useful patterns. This is always the case in graph visualisation and analysis. In order to gain meaningful visual discovery, it is always useful for us to looking into the details, for example by plotting sub-graphs.\n\n### **Visualising the sub-graph**\n\nIn this section, we are interested to create a sub-graph base on *MemberOf* value in *Edge Type* column of the *edges* data frame.\n\n#### **Filtering edges to only “MemberOf”**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph_memberof <- graph %>%\n  activate(edges) %>%\n  filter(`Edge Type` == \"MemberOf\")\n```\n:::\n\n\n\n#### **Extracting only connected nodes (i.e., used in these edges)**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nused_node_indices <- graph_memberof %>%\n  activate(edges) %>%\n  as_tibble() %>%\n  select(from, to) %>%\n  unlist() %>%\n  unique()\n```\n:::\n\n\n\n#### **Keeping only those nodes**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph_memberof <- graph_memberof %>%\n  activate(nodes) %>%\n  mutate(row_id = row_number()) %>%\n  filter(row_id %in% used_node_indices) %>%\n  select(-row_id)  # optional cleanup\n```\n:::\n\n\n\n#### **Plotting the sub-graph**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(graph_memberof, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5, \n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`), \n                  size = 1) +\n  geom_node_text(aes(label = name), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\nNotice that the sub-graph above is very clear and the relationship between musical group and person can be visualise easily.\n\n## Tasks and Questions:\n\n## 1a. Who influenced Sailor Shift?\n\nTo understand Sailor Shift’s musical inspirations and early career influences, we analyzed all incoming edges directed to her node labeled as `\"InStyleOf\"`, `\"CoverOf\"`, and `\"DirectlySamples\"`.\n\nA stacked bar chart was created to visualize the top 10 artists who most influenced Sailor Shift, categorized by type of influence. This analysis revealed that her style was shaped by a variety of artists, with influences ranging from stylistic imitation to direct sampling and covers.\n\nThis suggests that Sailor’s artistic development was not limited to a single mentor or genre, but instead built upon a diverse foundation of musical inspirations.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsailor_id <- nodes_tbl %>% filter(name == \"Sailor Shift\") %>% pull(id)\n\nin_edges <- edges_tbl %>%\n  filter(target == sailor_id,\n         `Edge Type` %in% c(\"InStyleOf\", \"CoverOf\", \"DirectlySamples\")) %>%\n  left_join(nodes_tbl %>% select(id, name), by = c(\"source\" = \"id\"))\n\nin_edges %>%\n  filter(name != \"0\") %>%\n  count(name, `Edge Type`, sort = TRUE) %>%\n  group_by(name) %>%\n  mutate(total = sum(n)) %>%\n  ungroup() %>%\n  slice_max(order_by = total, n = 10) %>%\n  ggplot(aes(x = reorder(name, total), y = n, fill = `Edge Type`)) +\n  geom_col(width = 0.6) +\n  coord_flip() +\n  labs(title = \"Top 10 Influencers of Sailor Shift\",\n       x = \"Artist\", y = \"Frequency\",\n       fill = \"Type of Influence\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n## 1b. Who did Sailor Shift influence?\n\nTo assess Sailor Shift’s direct impact on the music community, we examined all outgoing edges from her node, focusing again on `\"InStyleOf\"`, `\"CoverOf\"`, and `\"DirectlySamples\"`.\n\nThe top 10 recipients of her influence were visualized in a stacked bar chart, highlighting the nature and frequency of the influence relationships. This illustrates the artists who either borrowed stylistically from Sailor or engaged with her work directly through covers or sampling.\n\nThe visualization shows that Sailor played an active and multifaceted role in shaping the musical directions of several notable artists. Her influence extended into both Oceanus Folk and adjacent genres, establishing her as a key figure in the evolving music landscape.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsailor_id <- nodes_tbl %>% filter(name == \"Sailor Shift\") %>% pull(id)\n\nout_edges <- edges_tbl %>%\n  filter(source == sailor_id,\n         `Edge Type` %in% c(\"InStyleOf\", \"CoverOf\", \"DirectlySamples\")) %>%\n  left_join(nodes_tbl %>% select(id, name), by = c(\"target\" = \"id\"))\n\nout_edges %>%\n  filter(name != \"0\") %>%\n  count(name, `Edge Type`, sort = TRUE) %>%\n  group_by(name) %>%\n  mutate(total = sum(n)) %>%\n  ungroup() %>%\n  slice_max(order_by = total, n = 10) %>%\n  ggplot(aes(x = reorder(name, total), y = n, fill = `Edge Type`)) +\n  geom_col(width = 0.6) +\n  coord_flip() +\n  labs(\n    title = \"Top 10 Artists Influenced by Sailor Shift\",\n    x = \"Artist\", y = \"Influence Frequency\",\n    fill = \"Type of Influence\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n## 1c. How did Sailor Shift influence collaborators of the broader Oceanus Folk community?\n\n### Analytical Approach\n\nTo understand Sailor Shift’s extended influence, we examined not only the artists directly influenced by her, but also those who were influenced indirectly via her collaborators. Specifically, we traced all edges where Sailor was the source (direct influence), and then followed the influence paths of her direct collaborators (second-degree influence).\n\n### Key Findings\n\n-   Sailor Shift directly influenced **3 artists** through collaborations or stylistic influence.\n\n<!-- -->\n\n-   These collaborators subsequently influenced **2 additional artists**.\n\n<!-- -->\n\n-   In total, her influence extends across **6 unique individuals** through two layers.\n\n<!-- -->\n\n-   Among the second-degree influenced artists, **none were explicitly labeled under the “Oceanus Folk” genre** (suggesting that her influence transcended genres).\n\n### Insights\n\nAlthough none of the second-degree influenced artists were tagged as “Oceanus Folk”, Sailor’s influence propagated through her collaborators to shape a broader group of artists. This highlights her role as a **catalyst within the network**, enabling stylistic diffusion even when the final recipients fall outside her original genre.\n\nThis pattern suggests that Sailor served as a **bridge between Oceanus Folk and other genres**, allowing her influence to transcend traditional boundaries and seed innovation across the music ecosystem.\n",
    "supporting": [
      "Take-home_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}