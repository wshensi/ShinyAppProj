---
title: "Hands-on Exercise 8.3"
description: "Visualising Geospatial Point Data" 
date: "June 12, 2025" 
date-modified: "June 13, 2025" 
format: html
author: "Wang Shen Si" 
editor: visual 
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

## **Getting Started**

### **Installing and loading packages**

```{r}
pacman::p_load(tmap, tidyverse, sf)
```

### **Importing data**

```{r}
NGA_wp <- read_rds("data/rds/NGA_wp.rds")
```

## **Basic Choropleth Mapping**

### **Visualising distribution of non-functional water point**

```{r}
p1 <- tm_shape(NGA_wp) +
  tm_polygons(fill = "wp_functional",
             fill.scale = tm_scale_intervals(
               style = "equal",
               n = 10,
               values = "brewer.blues"),
             fill.legend = tm_legend(
               position = c("right", "bottom"))) +
  tm_borders(lwd = 0.1,
             fill_alpha = 1) +
  tm_title("Distribution of functional water point by LGAs")
```

```{r}
p2 <- tm_shape(NGA_wp) + 
  tm_polygons(fill = "total_wp", 
              fill.scale = tm_scale_intervals(
                style = "equal",
                n = 10,
                values = "brewer.blues"),
              fill.legend = tm_legend(
                position = c("right", "bottom"))) +
  tm_borders(lwd = 0.1, 
             fill_alpha = 1) + 
  tm_title("Distribution of total  water point by LGAs")
```

## **Choropleth Map for Rates**

### **Deriving Proportion of Functional Water Points and Non-Functional Water Points**

```{r}
NGA_wp <- NGA_wp %>%
  mutate(pct_functional = wp_functional/total_wp) %>%
  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)
```

### **Plotting map of rate**

```{r}
tm_shape(NGA_wp) +
  tm_polygons("pct_functional",
              fill.scale = tm_scale_intervals(
                style = "equal",
                n = 10,
                values = "brewer.blues"),
              fill.legend = tm_legend(
                position = c("right", "bottom"))) + 
  tm_borders(lwd = 0.1,
             fill_alpha = 1) +
  tm_title("Rate map of functional water point by LGAs")
```

## **Extreme Value Maps**

### **Percentile Map**

The percentile map is a special type of quantile map with six specific categories: 0-1%,1-10%, 10-50%,50-90%,90-99%, and 99-100%. The corresponding breakpoints can be derived by means of the base R quantile command, passing an explicit vector of cumulative probabilities as c(0,.01,.1,.5,.9,.99,1). Note that the begin and endpoint need to be included.

#### Data Preparation

Step 1: Exclude records with NA by using the code chunk below.

```{r}
NGA_wp <- NGA_wp %>%
  drop_na()
```

Step 2: Creating customised classification and extracting values

```{r}
percent <- c(0,.01,.1,.5,.9,.99,1)
var <- NGA_wp["pct_functional"] %>%
  st_set_geometry(NULL)
quantile(var[,1], percent)
```

#### Creating the get.var function

Firstly, we will write an R function as shown below to extract a variable (i.e. *wp_nonfunctional*) as a vector out of an sf data.frame.

-   arguments:

    -   vname: variable name (as character, in quotes)

    -   df: name of sf data frame

-   returns:

    -   v: vector with values (without a column name)

```{r}
get.var <- function(vname,df) {
  v <- df[vname] %>% 
    st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}
```

#### A percentile mapping function

Next, we will write a percentile mapping function by using the code chunk below.

```{r}
percentmap <- function(vnam, df, legtitle=NA, mtitle="Percentile Map"){
  percent <- c(0,.01,.1,.5,.9,.99,1)
  var <- get.var(vnam, df)
  bperc <- quantile(var, percent)
  tm_shape(df) +
  tm_polygons() +
  tm_shape(df) +
     tm_polygons(vnam,
             title=legtitle,
             breaks=bperc,
             palette="Blues",
          labels=c("< 1%", "1% - 10%", "10% - 50%", "50% - 90%", "90% - 99%", "> 99%"))  +
  tm_borders() +
  tm_layout(main.title = mtitle, 
            title.position = c("right","bottom"))
}
```

#### Test drive the percentile mapping function

To run the function, type the code chunk as shown below.

```{r}
percentmap("total_wp", NGA_wp)
```

### **Box map**

```{r}
ggplot(data = NGA_wp,
       aes(x = "",
           y = wp_nonfunctional)) +
  geom_boxplot()
```

-   Displaying summary statistics on a choropleth map by using the basic principles of boxplot.

-   To create a box map, a custom breaks specification will be used. However, there is a complication. The break points for the box map vary depending on whether lower or upper outliers are present.

#### Creating the boxbreaks function

The code chunk below is an R function that creating break points for a box map.

-   arguments:

    -   v: vector with observations

    -   mult: multiplier for IQR (default 1.5)

-   returns:

    -   bb: vector with 7 break points compute quartile and fences

```{r}
boxbreaks <- function(v,mult=1.5) {
  qv <- unname(quantile(v))
  iqr <- qv[4] - qv[2]
  upfence <- qv[4] + mult * iqr
  lofence <- qv[2] - mult * iqr
  # initialize break points vector
  bb <- vector(mode="numeric",length=7)
  # logic for lower and upper fences
  if (lofence < qv[1]) {  # no lower outliers
    bb[1] <- lofence
    bb[2] <- floor(qv[1])
  } else {
    bb[2] <- lofence
    bb[1] <- qv[1]
  }
  if (upfence > qv[5]) { # no upper outliers
    bb[7] <- upfence
    bb[6] <- ceiling(qv[5])
  } else {
    bb[6] <- upfence
    bb[7] <- qv[5]
  }
  bb[3:5] <- qv[2:4]
  return(bb)
}
```

#### Creating the get.var function

The code chunk below is an R function to extract a variable as a vector out of an sf data frame.

-   arguments:

    -   vname: variable name (as character, in quotes)

    -   df: name of sf data frame

-   returns:

    -   v: vector with values (without a column name)

```{r}
get.var <- function(vname,df) {
  v <- df[vname] %>% st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}
```

#### Test drive the newly created function

Let’s test the newly created function

```{r}
var <- get.var("wp_nonfunctional", NGA_wp) 
boxbreaks(var)
```

#### Boxmap function

The code chunk below is an R function to create a box map. - arguments: - vnam: variable name (as character, in quotes) - df: simple features polygon layer - legtitle: legend title - mtitle: map title - mult: multiplier for IQR - returns: - a tmap-element (plots a map)

```{r}
boxmap <- function(vnam, df, 
                   legtitle=NA,
                   mtitle="Box Map",
                   mult=1.5){
  var <- get.var(vnam,df)
  bb <- boxbreaks(var)
  tm_shape(df) +
    tm_polygons() +
  tm_shape(df) +
     tm_fill(vnam,title=legtitle,
             breaks=bb,
             palette="Blues",
          labels = c("lower outlier", 
                     "< 25%", 
                     "25% - 50%", 
                     "50% - 75%",
                     "> 75%", 
                     "upper outlier"))  +
  tm_borders() +
  tm_layout(main.title = mtitle, 
            title.position = c("left",
                               "top"))
}
```

```{r}
tmap_mode("plot")
boxmap("wp_nonfunctional", NGA_wp)
```
